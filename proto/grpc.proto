syntax = "proto3";

//import "google/protobuf/timestamp.proto-go";
import "google/api/annotations.proto";

service grpc {
    rpc CreateVM (VMData) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/{vmname}"
            body: "*"
        };
    }
    rpc DeleteVM (VMID) returns (Result) {
        option (google.api.http) = {
            delete: "/api/v1/vm/{id}"
        };
    }
    rpc StartVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/start/{id}"
            body: "*"
        };
    }
    rpc StopVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/stop/{id}"
            body: "*"
        };
    }
    rpc ShutdownVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/shutdown/{id}"
            body: "*"
        };
    }
    rpc ResetVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/reset/{id}"
            body: "*"
        };
    }
    rpc PauseVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/pause/{id}"
            body: "*"
        };
    }
    rpc ResumeVM (VMID) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/vm/resume/{id}"
            body: "*"
        };
    }
    rpc GetSnapshotVM (VMID) returns (stream SnapshotData) {
    }
    rpc SnapshotOperationVM (SnapshotOperationData) returns (Result) {
    }
    rpc GetVM (VMID) returns (VMData) {
        option (google.api.http) = {
            get: "/api/v1/vm/get/{id}"
        };
    }
    rpc GetVMName (VMName) returns (VMData) {
    }
    rpc GetUserVM (Base) returns (stream VMData) {
        option (google.api.http) = {
            get: "/api/v1/vm/user/{userid}"
        };
    }
    rpc GetGroupVM (Base) returns (stream VMData) {
        option (google.api.http) = {
            get: "/api/v1/vm/group/{group}"
        };
    }
    rpc GetAllVM (Base) returns (stream VMData) {
        option (google.api.http) = {
            get: "/api/v1/vm/all"
        };
    }
    rpc AddNode (NodeData) returns (Result) {
    }
    rpc GetNode (Base) returns (stream NodeData) {
    }
    rpc RemoveNode (NodeID) returns (Result) {
    }
    rpc StartNode (NodeID) returns (Result) {
    }
    rpc StopNode (NodeID) returns (Result) {
    }
    rpc AddUser (UserData) returns (Result) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };
    }
    rpc RemoveUser (UserData) returns (Result) {
        option (google.api.http) = {
            delete: "/api/v1/user/{id}"
        };
    }
    rpc GetUser (UserData) returns (stream UserData) {
        option (google.api.http) = {
            get: "/api/v1/user"
        };
    }
    rpc TestUserPass (UserData) returns (Result) {
    }
    rpc ChangeUserPass (UserData) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/user/{id}"
            body: "*"
        };
    }
    rpc ChangeUserName (UserData) returns (Result) {
        option (google.api.http) = {
            put: "/api/v1/user/{id}"
            body: "*"
        };
    }
    rpc AddGroup (GroupData) returns (Result) {
        option (google.api.http) = {
            post: "/api/v1/group"
            body: "*"
        };
    }
    rpc RemoveGroup (GroupData) returns (Result) {
        option (google.api.http) = {
            delete: "/api/v1/group/{id}"
        };
    }
    rpc GetGroup (GroupData) returns (stream GroupData) {
        option (google.api.http) = {
            get: "/api/v1/group"
        };
    }
    rpc UserAddGroup (GroupData) returns (Result) {
        option (google.api.http) = {
            post: "/api/v1/group/join"
            body: "*"
        };
    }
    rpc UserRemoveGroup (GroupData) returns (Result) {
        option (google.api.http) = {
            post: "/api/v1/group/join/{id}/{mode}/{user}"
            body: "*"
        };
    }
    rpc GenerateToken (Base) returns (AuthResult) {
        option (google.api.http) = {
            post: "/api/v1/token"
            body: "*"
        };
    }
    rpc DeleteToken (Base) returns (Result) {
        option (google.api.http) = {
            delete: "/api/v1/token"
        };
    }
    rpc GetAllToken (Base) returns (stream TokenData) {
        option (google.api.http) = {
            get: "/api/v1/token"
        };
    }
    rpc GetToken (Base) returns (TokenData) {
        option (google.api.http) = {
            get: "/api/v1/token/{token}"
        };
    }
    rpc CheckToken(Null) returns (Result){
        option (google.api.http) = {
            post: "/api/v1/token/check"
            body: "*"
        };
    }
}

message Null {
}

message Base {
    string user = 1;
    string pass = 2;
    string group = 3;
    string token = 4;
    bool result = 5;
    int32 userid = 6;
}

message AuthResult {
    string token = 1;
    string name = 2;
    int32 id =3;
    bool result = 4;
}

message TokenData {
    int64 id = 1;
    string token = 2;
    int32 userid = 3;
    string groupid = 4;
    int64 begintime = 5;
    int64 endtime = 6;
}

message VMData {
    Base base = 1;
    int32 node = 2;
    string vmname = 3;
    int64 vcpu = 4;
    int64 vmem = 5;
    int32 storagetype = 6; //1: Normal Disk 2: SSD 3: NVMe 4: iSCSI
    int64 storage = 7;
    string cdrom = 8;
    string vnet = 9;
    Option option = 10;
}

message Option {
    string storage_path = 1;
    string cdrom_path = 2;
    int32 image = 3;
    int32 vnc = 4;
    int64 id = 5;
    bool autostart = 6;
    int32 status = 7;
}

message SnapshotOperationData {
    Base base = 1;
    int64 vmid = 2;
    int32 operation = 3; //0: Create ,1: Load ,2: Delete
    string tag = 4;
}

message SnapshotData {
    int64 id = 1;
    string tag = 2;
    string size = 3;
    string date = 4;
    string vmclock = 5;
}

message VMName {
    Base base = 1;
    string vmname = 2;
}

message VMDataResponse {
    repeated VMData VMDatas = 1;
}

message VMID {
    Base base = 1;
    int64 id = 2;
}


message Result {
    bool status = 1;
    string info = 2;
    int32 id = 3;
}

message NodeID {
    Base base = 1;
    int32 NodeID = 2;
}

message NodeData {
    Base base = 1;
    int32 NodeID = 2;
    string hostname = 3;
    string IP = 4;
    string path = 5;
    bool onlyAdmin = 6;
    int32 status = 7;
    bool enable = 8;
    SpecData sepc = 9;
}

message UserData {
    Base base = 1;
    int64 id = 2;
    string user = 3;
    string pass = 4;
    int32 mode = 5;
    string token = 6;
    SpecData sepc = 7;
}

//Get : mode0 <-All mode1 <- Select mode2 <- MyGroup
//Join: mode0 <- Admin mode1 <- User
message GroupData {
    Base base = 1;
    int32 id = 2;
    string name = 3;
    string admin = 4;
    string user = 5;
    int32 mode = 6;
    bool team = 7;
    SpecData sepc = 8;
}

message SpecData {
    int32 maxvm = 1;
    int32 maxcpu = 2;
    int32 maxmem = 3;
    int32 maxstorage = 4;
    string net = 5;
}