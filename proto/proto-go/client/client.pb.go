// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Base struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}

func (m *Base) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Base.Unmarshal(m, b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Base.Marshal(b, m, deterministic)
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return xxx_messageInfo_Base.Size(m)
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Base) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *Base) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type VMData struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Node                 int32    `protobuf:"varint,2,opt,name=node,proto3" json:"node,omitempty"`
	Vmname               string   `protobuf:"bytes,3,opt,name=vmname,proto3" json:"vmname,omitempty"`
	Vcpu                 int64    `protobuf:"varint,4,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Vmem                 int64    `protobuf:"varint,5,opt,name=vmem,proto3" json:"vmem,omitempty"`
	Storagetype          int32    `protobuf:"varint,6,opt,name=storagetype,proto3" json:"storagetype,omitempty"`
	Storage              int64    `protobuf:"varint,7,opt,name=storage,proto3" json:"storage,omitempty"`
	Cdrom                string   `protobuf:"bytes,8,opt,name=cdrom,proto3" json:"cdrom,omitempty"`
	Vnet                 string   `protobuf:"bytes,9,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Option               *Option  `protobuf:"bytes,10,opt,name=option,proto3" json:"option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMData) Reset()         { *m = VMData{} }
func (m *VMData) String() string { return proto.CompactTextString(m) }
func (*VMData) ProtoMessage()    {}
func (*VMData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}

func (m *VMData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMData.Unmarshal(m, b)
}
func (m *VMData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMData.Marshal(b, m, deterministic)
}
func (m *VMData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMData.Merge(m, src)
}
func (m *VMData) XXX_Size() int {
	return xxx_messageInfo_VMData.Size(m)
}
func (m *VMData) XXX_DiscardUnknown() {
	xxx_messageInfo_VMData.DiscardUnknown(m)
}

var xxx_messageInfo_VMData proto.InternalMessageInfo

func (m *VMData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMData) GetNode() int32 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *VMData) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

func (m *VMData) GetVcpu() int64 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *VMData) GetVmem() int64 {
	if m != nil {
		return m.Vmem
	}
	return 0
}

func (m *VMData) GetStoragetype() int32 {
	if m != nil {
		return m.Storagetype
	}
	return 0
}

func (m *VMData) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *VMData) GetCdrom() string {
	if m != nil {
		return m.Cdrom
	}
	return ""
}

func (m *VMData) GetVnet() string {
	if m != nil {
		return m.Vnet
	}
	return ""
}

func (m *VMData) GetOption() *Option {
	if m != nil {
		return m.Option
	}
	return nil
}

type Option struct {
	StoragePath          string   `protobuf:"bytes,1,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	CdromPath            string   `protobuf:"bytes,2,opt,name=cdrom_path,json=cdromPath,proto3" json:"cdrom_path,omitempty"`
	Vnc                  int32    `protobuf:"varint,3,opt,name=vnc,proto3" json:"vnc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{2}
}

func (m *Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Option.Unmarshal(m, b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Option.Marshal(b, m, deterministic)
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return xxx_messageInfo_Option.Size(m)
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *Option) GetCdromPath() string {
	if m != nil {
		return m.CdromPath
	}
	return ""
}

func (m *Option) GetVnc() int32 {
	if m != nil {
		return m.Vnc
	}
	return 0
}

type SnapshotOperationData struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Vmid                 int64    `protobuf:"varint,2,opt,name=vmid,proto3" json:"vmid,omitempty"`
	Operation            int32    `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotOperationData) Reset()         { *m = SnapshotOperationData{} }
func (m *SnapshotOperationData) String() string { return proto.CompactTextString(m) }
func (*SnapshotOperationData) ProtoMessage()    {}
func (*SnapshotOperationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{3}
}

func (m *SnapshotOperationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotOperationData.Unmarshal(m, b)
}
func (m *SnapshotOperationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotOperationData.Marshal(b, m, deterministic)
}
func (m *SnapshotOperationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotOperationData.Merge(m, src)
}
func (m *SnapshotOperationData) XXX_Size() int {
	return xxx_messageInfo_SnapshotOperationData.Size(m)
}
func (m *SnapshotOperationData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotOperationData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotOperationData proto.InternalMessageInfo

func (m *SnapshotOperationData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SnapshotOperationData) GetVmid() int64 {
	if m != nil {
		return m.Vmid
	}
	return 0
}

func (m *SnapshotOperationData) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *SnapshotOperationData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type SnapshotData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Size                 string   `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Date                 string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Vmclock              string   `protobuf:"bytes,5,opt,name=vmclock,proto3" json:"vmclock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotData) Reset()         { *m = SnapshotData{} }
func (m *SnapshotData) String() string { return proto.CompactTextString(m) }
func (*SnapshotData) ProtoMessage()    {}
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{4}
}

func (m *SnapshotData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotData.Unmarshal(m, b)
}
func (m *SnapshotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotData.Marshal(b, m, deterministic)
}
func (m *SnapshotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotData.Merge(m, src)
}
func (m *SnapshotData) XXX_Size() int {
	return xxx_messageInfo_SnapshotData.Size(m)
}
func (m *SnapshotData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotData proto.InternalMessageInfo

func (m *SnapshotData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SnapshotData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SnapshotData) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *SnapshotData) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *SnapshotData) GetVmclock() string {
	if m != nil {
		return m.Vmclock
	}
	return ""
}

type VMName struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Vmname               string   `protobuf:"bytes,2,opt,name=vmname,proto3" json:"vmname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMName) Reset()         { *m = VMName{} }
func (m *VMName) String() string { return proto.CompactTextString(m) }
func (*VMName) ProtoMessage()    {}
func (*VMName) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{5}
}

func (m *VMName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMName.Unmarshal(m, b)
}
func (m *VMName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMName.Marshal(b, m, deterministic)
}
func (m *VMName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMName.Merge(m, src)
}
func (m *VMName) XXX_Size() int {
	return xxx_messageInfo_VMName.Size(m)
}
func (m *VMName) XXX_DiscardUnknown() {
	xxx_messageInfo_VMName.DiscardUnknown(m)
}

var xxx_messageInfo_VMName proto.InternalMessageInfo

func (m *VMName) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMName) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

type VMDataResponse struct {
	VMDatas              []*VMData `protobuf:"bytes,1,rep,name=VMDatas,proto3" json:"VMDatas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMDataResponse) Reset()         { *m = VMDataResponse{} }
func (m *VMDataResponse) String() string { return proto.CompactTextString(m) }
func (*VMDataResponse) ProtoMessage()    {}
func (*VMDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{6}
}

func (m *VMDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMDataResponse.Unmarshal(m, b)
}
func (m *VMDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMDataResponse.Marshal(b, m, deterministic)
}
func (m *VMDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMDataResponse.Merge(m, src)
}
func (m *VMDataResponse) XXX_Size() int {
	return xxx_messageInfo_VMDataResponse.Size(m)
}
func (m *VMDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMDataResponse proto.InternalMessageInfo

func (m *VMDataResponse) GetVMDatas() []*VMData {
	if m != nil {
		return m.VMDatas
	}
	return nil
}

type VMID struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMID) Reset()         { *m = VMID{} }
func (m *VMID) String() string { return proto.CompactTextString(m) }
func (*VMID) ProtoMessage()    {}
func (*VMID) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{7}
}

func (m *VMID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMID.Unmarshal(m, b)
}
func (m *VMID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMID.Marshal(b, m, deterministic)
}
func (m *VMID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMID.Merge(m, src)
}
func (m *VMID) XXX_Size() int {
	return xxx_messageInfo_VMID.Size(m)
}
func (m *VMID) XXX_DiscardUnknown() {
	xxx_messageInfo_VMID.DiscardUnknown(m)
}

var xxx_messageInfo_VMID proto.InternalMessageInfo

func (m *VMID) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Result struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{8}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Result) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type NodeID struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int32    `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeID) Reset()         { *m = NodeID{} }
func (m *NodeID) String() string { return proto.CompactTextString(m) }
func (*NodeID) ProtoMessage()    {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{9}
}

func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeID.Unmarshal(m, b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeID.Marshal(b, m, deterministic)
}
func (m *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(m, src)
}
func (m *NodeID) XXX_Size() int {
	return xxx_messageInfo_NodeID.Size(m)
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *NodeID) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *NodeID) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type NodeData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int32     `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	IP                   string    `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 string    `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Status               bool      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Enable               bool      `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,7,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeData) Reset()         { *m = NodeData{} }
func (m *NodeData) String() string { return proto.CompactTextString(m) }
func (*NodeData) ProtoMessage()    {}
func (*NodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{10}
}

func (m *NodeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeData.Unmarshal(m, b)
}
func (m *NodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeData.Marshal(b, m, deterministic)
}
func (m *NodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeData.Merge(m, src)
}
func (m *NodeData) XXX_Size() int {
	return xxx_messageInfo_NodeData.Size(m)
}
func (m *NodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeData.DiscardUnknown(m)
}

var xxx_messageInfo_NodeData proto.InternalMessageInfo

func (m *NodeData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *NodeData) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeData) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *NodeData) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *NodeData) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *NodeData) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *NodeData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

type UserData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	User                 string    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string    `protobuf:"bytes,4,opt,name=pass,proto3" json:"pass,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,5,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserData) Reset()         { *m = UserData{} }
func (m *UserData) String() string { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()    {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{11}
}

func (m *UserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserData.Unmarshal(m, b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
}
func (m *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(m, src)
}
func (m *UserData) XXX_Size() int {
	return xxx_messageInfo_UserData.Size(m)
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserData) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserData) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *UserData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

type GroupData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int32     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Admin                string    `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	User                 string    `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Team                 bool      `protobuf:"varint,6,opt,name=team,proto3" json:"team,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,7,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GroupData) Reset()         { *m = GroupData{} }
func (m *GroupData) String() string { return proto.CompactTextString(m) }
func (*GroupData) ProtoMessage()    {}
func (*GroupData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{12}
}

func (m *GroupData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupData.Unmarshal(m, b)
}
func (m *GroupData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupData.Marshal(b, m, deterministic)
}
func (m *GroupData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupData.Merge(m, src)
}
func (m *GroupData) XXX_Size() int {
	return xxx_messageInfo_GroupData.Size(m)
}
func (m *GroupData) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupData.DiscardUnknown(m)
}

var xxx_messageInfo_GroupData proto.InternalMessageInfo

func (m *GroupData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GroupData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupData) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *GroupData) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *GroupData) GetTeam() bool {
	if m != nil {
		return m.Team
	}
	return false
}

func (m *GroupData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

type SpecData struct {
	Maxcpu               int32    `protobuf:"varint,1,opt,name=maxcpu,proto3" json:"maxcpu,omitempty"`
	Maxmem               int32    `protobuf:"varint,2,opt,name=maxmem,proto3" json:"maxmem,omitempty"`
	Maxstorage           int32    `protobuf:"varint,3,opt,name=maxstorage,proto3" json:"maxstorage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecData) Reset()         { *m = SpecData{} }
func (m *SpecData) String() string { return proto.CompactTextString(m) }
func (*SpecData) ProtoMessage()    {}
func (*SpecData) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{13}
}

func (m *SpecData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecData.Unmarshal(m, b)
}
func (m *SpecData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecData.Marshal(b, m, deterministic)
}
func (m *SpecData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecData.Merge(m, src)
}
func (m *SpecData) XXX_Size() int {
	return xxx_messageInfo_SpecData.Size(m)
}
func (m *SpecData) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecData.DiscardUnknown(m)
}

var xxx_messageInfo_SpecData proto.InternalMessageInfo

func (m *SpecData) GetMaxcpu() int32 {
	if m != nil {
		return m.Maxcpu
	}
	return 0
}

func (m *SpecData) GetMaxmem() int32 {
	if m != nil {
		return m.Maxmem
	}
	return 0
}

func (m *SpecData) GetMaxstorage() int32 {
	if m != nil {
		return m.Maxstorage
	}
	return 0
}

func init() {
	proto.RegisterType((*Base)(nil), "Base")
	proto.RegisterType((*VMData)(nil), "VMData")
	proto.RegisterType((*Option)(nil), "Option")
	proto.RegisterType((*SnapshotOperationData)(nil), "SnapshotOperationData")
	proto.RegisterType((*SnapshotData)(nil), "SnapshotData")
	proto.RegisterType((*VMName)(nil), "VMName")
	proto.RegisterType((*VMDataResponse)(nil), "VMDataResponse")
	proto.RegisterType((*VMID)(nil), "VMID")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*NodeID)(nil), "NodeID")
	proto.RegisterType((*NodeData)(nil), "NodeData")
	proto.RegisterType((*UserData)(nil), "UserData")
	proto.RegisterType((*GroupData)(nil), "GroupData")
	proto.RegisterType((*SpecData)(nil), "SpecData")
}

func init() { proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c) }

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5f, 0x6f, 0xdc, 0x44,
	0x10, 0x8f, 0x7d, 0x67, 0x9f, 0x3d, 0x49, 0x2b, 0xb4, 0x40, 0xe4, 0x96, 0x34, 0xb9, 0x58, 0x3c,
	0x94, 0x17, 0xab, 0xa4, 0x3c, 0x20, 0xf1, 0x14, 0x88, 0x74, 0xca, 0xc3, 0xb5, 0x91, 0x4f, 0xdc,
	0x03, 0x42, 0x42, 0x1b, 0x7b, 0x49, 0x2c, 0xce, 0x5e, 0xcb, 0xbb, 0x77, 0x14, 0xc4, 0xf7, 0xe1,
	0x95, 0x6f, 0xc1, 0xb7, 0x42, 0x68, 0x66, 0x77, 0x2f, 0xbe, 0xd6, 0x49, 0xfa, 0x36, 0xf3, 0x9b,
	0xf1, 0xcc, 0xce, 0xbf, 0x9f, 0x0c, 0x07, 0xc5, 0xaa, 0x12, 0x8d, 0xce, 0xda, 0x4e, 0x6a, 0x99,
	0x5e, 0xc0, 0xf8, 0x7b, 0xae, 0x04, 0x63, 0x30, 0x5e, 0x2b, 0xd1, 0x25, 0xde, 0xd4, 0x7b, 0x19,
	0xe7, 0x24, 0x23, 0xd6, 0x72, 0xa5, 0x12, 0xdf, 0x60, 0x28, 0xb3, 0xcf, 0x20, 0xb8, 0xe9, 0xe4,
	0xba, 0x4d, 0x46, 0x04, 0x1a, 0x25, 0xfd, 0xcf, 0x83, 0x70, 0x39, 0xbf, 0xe0, 0x9a, 0xb3, 0x67,
	0x30, 0xbe, 0xe6, 0x4a, 0x50, 0xa0, 0xfd, 0xb3, 0x20, 0xc3, 0xe8, 0x39, 0x41, 0x18, 0xaf, 0x91,
	0xa5, 0xa0, 0x78, 0x41, 0x4e, 0x32, 0x3b, 0x84, 0x70, 0x53, 0x37, 0xbc, 0x16, 0x36, 0xa0, 0xd5,
	0xd0, 0x77, 0x53, 0xb4, 0xeb, 0x64, 0x3c, 0xf5, 0x5e, 0x8e, 0x72, 0x92, 0x09, 0xab, 0x45, 0x9d,
	0x04, 0x16, 0xab, 0x45, 0xcd, 0xa6, 0xb0, 0xaf, 0xb4, 0xec, 0xf8, 0x8d, 0xd0, 0x7f, 0xb4, 0x22,
	0x09, 0x29, 0x74, 0x1f, 0x62, 0x09, 0x4c, 0xac, 0x9a, 0x4c, 0xe8, 0x43, 0xa7, 0x62, 0x2d, 0x45,
	0xd9, 0xc9, 0x3a, 0x89, 0x4c, 0x2d, 0xa4, 0x50, 0x96, 0x46, 0xe8, 0x24, 0x36, 0x55, 0xa3, 0xcc,
	0x4e, 0x20, 0x94, 0xad, 0xae, 0x64, 0x93, 0x00, 0x95, 0x35, 0xc9, 0xde, 0x92, 0x9a, 0x5b, 0x38,
	0xfd, 0x19, 0x42, 0x83, 0xb0, 0x53, 0x38, 0xb0, 0xf1, 0x7f, 0x69, 0xb9, 0xbe, 0xb5, 0x0d, 0x75,
	0x2f, 0xba, 0xe2, 0xfa, 0x96, 0xbd, 0x00, 0xa0, 0x54, 0xc6, 0xc1, 0x74, 0x37, 0x26, 0x84, 0xcc,
	0x9f, 0xc0, 0x68, 0xd3, 0x14, 0xd4, 0x8f, 0x20, 0x47, 0x31, 0xdd, 0xc0, 0xe7, 0x8b, 0x86, 0xb7,
	0xea, 0x56, 0xea, 0xb7, 0xad, 0xe8, 0x38, 0x26, 0xfa, 0x88, 0x66, 0x6f, 0xea, 0xaa, 0xa4, 0xf0,
	0xd4, 0xac, 0xaa, 0x64, 0x47, 0x10, 0x4b, 0xf7, 0xbd, 0x8d, 0x7f, 0x07, 0x60, 0x5e, 0xcd, 0x6f,
	0xa8, 0xe3, 0x71, 0x8e, 0x62, 0xda, 0xc1, 0x81, 0xcb, 0x4b, 0xe9, 0x9e, 0x82, 0x5f, 0x95, 0x94,
	0x6c, 0x94, 0xfb, 0x55, 0xe9, 0xbe, 0xf0, 0xb7, 0x5f, 0x60, 0x56, 0x55, 0xfd, 0xe9, 0x86, 0x49,
	0x32, 0x62, 0x25, 0xd7, 0xc2, 0x06, 0x26, 0x19, 0x87, 0xb2, 0xa9, 0x8b, 0x95, 0x2c, 0x7e, 0xa3,
	0x69, 0xc6, 0xb9, 0x53, 0xd3, 0xef, 0x70, 0x93, 0xde, 0xe0, 0x0a, 0x3c, 0x50, 0xdc, 0xdd, 0xd6,
	0xf8, 0xfd, 0xad, 0x49, 0x5f, 0xc3, 0x53, 0xb3, 0x86, 0xb9, 0x50, 0xad, 0x6c, 0x94, 0x60, 0xa7,
	0x30, 0x31, 0x88, 0x4a, 0xbc, 0xe9, 0x88, 0x46, 0x67, 0x3d, 0x1c, 0x9e, 0x7e, 0x0d, 0xe3, 0xe5,
	0xfc, 0xf2, 0xe2, 0xa1, 0x7c, 0xa6, 0x70, 0xdf, 0x15, 0x9e, 0x7e, 0x03, 0x61, 0x2e, 0xd4, 0x7a,
	0xa5, 0xf1, 0x25, 0x4a, 0x73, 0xbd, 0x56, 0xf4, 0x59, 0x94, 0x5b, 0x0d, 0x8b, 0xae, 0x9a, 0x5f,
	0xa5, 0xbb, 0x1d, 0x94, 0xb1, 0xb4, 0x37, 0xb2, 0x14, 0x0f, 0xa7, 0x3a, 0x74, 0x4e, 0xf6, 0x4c,
	0xac, 0x96, 0xfe, 0xe3, 0x41, 0x84, 0xe2, 0x63, 0x73, 0xbf, 0xe7, 0x7b, 0x2c, 0xe1, 0xf2, 0xca,
	0xce, 0xc5, 0xbf, 0xbc, 0xa2, 0xe3, 0x96, 0x9d, 0x76, 0x53, 0x41, 0xb9, 0x57, 0x4c, 0xb0, 0x53,
	0xcc, 0x21, 0x84, 0xa2, 0xe1, 0xd7, 0x2b, 0x73, 0x5f, 0x51, 0x6e, 0x35, 0xf6, 0x02, 0xc6, 0x4a,
	0xb4, 0x05, 0xdd, 0xd5, 0xfe, 0x59, 0x9c, 0x2d, 0x5a, 0x51, 0x50, 0x6f, 0x09, 0x4e, 0xff, 0x82,
	0xe8, 0x47, 0x25, 0xba, 0xc7, 0x5e, 0xfc, 0x5e, 0x73, 0xb7, 0x54, 0x34, 0x1a, 0xa0, 0xa2, 0x71,
	0x8f, 0x8a, 0x5c, 0xf6, 0x60, 0x38, 0xfb, 0xdf, 0x1e, 0xc4, 0x33, 0x64, 0xa7, 0x8f, 0xcf, 0x1f,
	0xb8, 0xfc, 0x3d, 0x42, 0x22, 0x19, 0xa9, 0x82, 0x97, 0x75, 0xd5, 0xd8, 0x07, 0x18, 0x65, 0xfb,
	0xd2, 0x60, 0xf7, 0xa5, 0x5a, 0xf0, 0xda, 0x76, 0x8a, 0xe4, 0xc7, 0xfa, 0xf4, 0x13, 0x44, 0x0e,
	0xc1, 0x56, 0xd7, 0xfc, 0x1d, 0x32, 0x9f, 0x67, 0xc6, 0x67, 0x34, 0x8b, 0x23, 0xfb, 0xf9, 0x5b,
	0x1c, 0xf9, 0xef, 0x18, 0xa0, 0xe6, 0xef, 0x1c, 0xc1, 0x99, 0x9b, 0xee, 0x21, 0x67, 0xff, 0x06,
	0xe0, 0x2f, 0xe7, 0xec, 0x18, 0xa2, 0x1f, 0x3a, 0xc1, 0xb5, 0x58, 0xce, 0x99, 0xbb, 0x80, 0xe7,
	0x93, 0xcc, 0x2c, 0x71, 0xba, 0xc7, 0x8e, 0x20, 0xba, 0x10, 0x2b, 0x41, 0xf6, 0x20, 0xc3, 0x73,
	0xe8, 0x5b, 0xbf, 0x80, 0xc9, 0x42, 0xf3, 0x4e, 0x0f, 0x1a, 0x9f, 0x43, 0xb8, 0xd0, 0xb2, 0x1d,
	0xb4, 0x1d, 0x03, 0x2c, 0x6e, 0xd7, 0xba, 0x94, 0xbf, 0x37, 0xf7, 0x05, 0xce, 0x85, 0x12, 0xfa,
	0x3e, 0xe3, 0x15, 0x5f, 0xab, 0xe1, 0x27, 0x1d, 0x41, 0x84, 0x72, 0x3d, 0x6c, 0xfd, 0x0a, 0x9e,
	0xcc, 0x84, 0x76, 0xdc, 0x75, 0xe7, 0xf2, 0x24, 0xeb, 0xf3, 0x59, 0xba, 0xf7, 0xca, 0x63, 0xdf,
	0xc2, 0xa7, 0x1f, 0x70, 0xeb, 0x72, 0xce, 0x0e, 0xb3, 0x41, 0xc6, 0xed, 0x27, 0x79, 0x06, 0xc1,
	0x6c, 0xf7, 0xe9, 0xa6, 0xaf, 0xe9, 0x1e, 0x3b, 0x81, 0x98, 0x4c, 0xc4, 0x63, 0x88, 0xa3, 0xd0,
	0x77, 0x98, 0x02, 0xcc, 0x84, 0xa6, 0xf5, 0xa4, 0x00, 0xb8, 0x8e, 0x3d, 0xfb, 0x2b, 0x0f, 0x0b,
	0x9c, 0x09, 0x7d, 0xbe, 0x5a, 0x0d, 0x16, 0x78, 0x02, 0x93, 0xf3, 0xb2, 0xc4, 0xd3, 0x66, 0x71,
	0xe6, 0x68, 0xe1, 0x3d, 0x87, 0x99, 0xd0, 0xe4, 0x60, 0xa3, 0xdf, 0xf9, 0x51, 0xfc, 0x29, 0x80,
	0x99, 0x38, 0xf9, 0x4c, 0x32, 0x43, 0x13, 0xbb, 0xc3, 0x8b, 0x70, 0xb0, 0xf7, 0xda, 0x4f, 0x21,
	0x3a, 0x2f, 0x4b, 0xaa, 0x81, 0x41, 0xb6, 0x3d, 0xb5, 0xbe, 0xcb, 0x97, 0xb0, 0x6f, 0x92, 0x3c,
	0xe2, 0x15, 0xb9, 0x66, 0xec, 0xb8, 0xf4, 0xe4, 0x74, 0xef, 0x3a, 0xa4, 0x1f, 0x96, 0xd7, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xca, 0x98, 0x05, 0x19, 0xc0, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VMClient is the client API for VM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMClient interface {
	CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VM_GetSnapshotVMClient, error)
	SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error)
	GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error)
	GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error)
	GetGroupVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (VM_GetGroupVMClient, error)
	GetAllVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	AddNode(ctx context.Context, in *NodeData, opts ...grpc.CallOption) (*Result, error)
	GetNode(ctx context.Context, in *Base, opts ...grpc.CallOption) (VM_GetNodeClient, error)
	DeleteNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error)
	StopNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error)
	AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	DeleteGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*GroupData, error)
}

type vMClient struct {
	cc grpc.ClientConnInterface
}

func NewVMClient(cc grpc.ClientConnInterface) VMClient {
	return &vMClient{cc}
}

func (c *vMClient) CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ShutdownVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ResetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/PauseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ResumeVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VM_GetSnapshotVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VM_serviceDesc.Streams[0], "/VM/GetSnapshotVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMGetSnapshotVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VM_GetSnapshotVMClient interface {
	Recv() (*SnapshotData, error)
	grpc.ClientStream
}

type vMGetSnapshotVMClient struct {
	grpc.ClientStream
}

func (x *vMGetSnapshotVMClient) Recv() (*SnapshotData, error) {
	m := new(SnapshotData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMClient) SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/SnapshotOperationVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/VM/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/VM/GetVMName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetGroupVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (VM_GetGroupVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VM_serviceDesc.Streams[1], "/VM/GetGroupVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMGetGroupVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VM_GetGroupVMClient interface {
	Recv() (*VMData, error)
	grpc.ClientStream
}

type vMGetGroupVMClient struct {
	grpc.ClientStream
}

func (x *vMGetGroupVMClient) Recv() (*VMData, error) {
	m := new(VMData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMClient) GetAllVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/GetAllVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) AddNode(ctx context.Context, in *NodeData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetNode(ctx context.Context, in *Base, opts ...grpc.CallOption) (VM_GetNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VM_serviceDesc.Streams[2], "/VM/GetNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMGetNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VM_GetNodeClient interface {
	Recv() (*NodeData, error)
	grpc.ClientStream
}

type vMGetNodeClient struct {
	grpc.ClientStream
}

func (x *vMGetNodeClient) Recv() (*NodeData, error) {
	m := new(NodeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMClient) DeleteNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StopNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) DeleteGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*GroupData, error) {
	out := new(GroupData)
	err := c.cc.Invoke(ctx, "/VM/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServer is the server API for VM service.
type VMServer interface {
	CreateVM(context.Context, *VMData) (*Result, error)
	DeleteVM(context.Context, *VMID) (*Result, error)
	StartVM(context.Context, *VMID) (*Result, error)
	StopVM(context.Context, *VMID) (*Result, error)
	ShutdownVM(context.Context, *VMID) (*Result, error)
	ResetVM(context.Context, *VMID) (*Result, error)
	PauseVM(context.Context, *VMID) (*Result, error)
	ResumeVM(context.Context, *VMID) (*Result, error)
	GetSnapshotVM(*VMID, VM_GetSnapshotVMServer) error
	SnapshotOperationVM(context.Context, *SnapshotOperationData) (*Result, error)
	GetVM(context.Context, *VMID) (*VMData, error)
	GetVMName(context.Context, *VMName) (*VMData, error)
	GetGroupVM(*Base, VM_GetGroupVMServer) error
	GetAllVM(context.Context, *VMID) (*Result, error)
	AddNode(context.Context, *NodeData) (*Result, error)
	GetNode(*Base, VM_GetNodeServer) error
	DeleteNode(context.Context, *NodeID) (*Result, error)
	StopNode(context.Context, *NodeID) (*Result, error)
	AddGroup(context.Context, *GroupData) (*Result, error)
	DeleteGroup(context.Context, *GroupData) (*Result, error)
	GetGroup(context.Context, *GroupData) (*GroupData, error)
}

// UnimplementedVMServer can be embedded to have forward compatible implementations.
type UnimplementedVMServer struct {
}

func (*UnimplementedVMServer) CreateVM(ctx context.Context, req *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedVMServer) DeleteVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedVMServer) StartVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (*UnimplementedVMServer) StopVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (*UnimplementedVMServer) ShutdownVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVM not implemented")
}
func (*UnimplementedVMServer) ResetVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVM not implemented")
}
func (*UnimplementedVMServer) PauseVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (*UnimplementedVMServer) ResumeVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (*UnimplementedVMServer) GetSnapshotVM(req *VMID, srv VM_GetSnapshotVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshotVM not implemented")
}
func (*UnimplementedVMServer) SnapshotOperationVM(ctx context.Context, req *SnapshotOperationData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotOperationVM not implemented")
}
func (*UnimplementedVMServer) GetVM(ctx context.Context, req *VMID) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedVMServer) GetVMName(ctx context.Context, req *VMName) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMName not implemented")
}
func (*UnimplementedVMServer) GetGroupVM(req *Base, srv VM_GetGroupVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupVM not implemented")
}
func (*UnimplementedVMServer) GetAllVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVM not implemented")
}
func (*UnimplementedVMServer) AddNode(ctx context.Context, req *NodeData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedVMServer) GetNode(req *Base, srv VM_GetNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedVMServer) DeleteNode(ctx context.Context, req *NodeID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedVMServer) StopNode(ctx context.Context, req *NodeID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (*UnimplementedVMServer) AddGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedVMServer) DeleteGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedVMServer) GetGroup(ctx context.Context, req *GroupData) (*GroupData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}

func RegisterVMServer(s *grpc.Server, srv VMServer) {
	s.RegisterService(&_VM_serviceDesc, srv)
}

func _VM_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).CreateVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ShutdownVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ShutdownVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ResetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ResetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ResetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ResetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/PauseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).PauseVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ResumeVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ResumeVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetSnapshotVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServer).GetSnapshotVM(m, &vMGetSnapshotVMServer{stream})
}

type VM_GetSnapshotVMServer interface {
	Send(*SnapshotData) error
	grpc.ServerStream
}

type vMGetSnapshotVMServer struct {
	grpc.ServerStream
}

func (x *vMGetSnapshotVMServer) Send(m *SnapshotData) error {
	return x.ServerStream.SendMsg(m)
}

func _VM_SnapshotOperationVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotOperationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).SnapshotOperationVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/SnapshotOperationVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).SnapshotOperationVM(ctx, req.(*SnapshotOperationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetVMName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetVMName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetVMName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetVMName(ctx, req.(*VMName))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetGroupVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServer).GetGroupVM(m, &vMGetGroupVMServer{stream})
}

type VM_GetGroupVMServer interface {
	Send(*VMData) error
	grpc.ServerStream
}

type vMGetGroupVMServer struct {
	grpc.ServerStream
}

func (x *vMGetGroupVMServer) Send(m *VMData) error {
	return x.ServerStream.SendMsg(m)
}

func _VM_GetAllVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetAllVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetAllVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetAllVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).AddNode(ctx, req.(*NodeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServer).GetNode(m, &vMGetNodeServer{stream})
}

type VM_GetNodeServer interface {
	Send(*NodeData) error
	grpc.ServerStream
}

type vMGetNodeServer struct {
	grpc.ServerStream
}

func (x *vMGetNodeServer) Send(m *NodeData) error {
	return x.ServerStream.SendMsg(m)
}

func _VM_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).DeleteNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StopNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).AddGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).DeleteGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

var _VM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VM",
	HandlerType: (*VMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VM_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VM_DeleteVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VM_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VM_StopVM_Handler,
		},
		{
			MethodName: "ShutdownVM",
			Handler:    _VM_ShutdownVM_Handler,
		},
		{
			MethodName: "ResetVM",
			Handler:    _VM_ResetVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _VM_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _VM_ResumeVM_Handler,
		},
		{
			MethodName: "SnapshotOperationVM",
			Handler:    _VM_SnapshotOperationVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _VM_GetVM_Handler,
		},
		{
			MethodName: "GetVMName",
			Handler:    _VM_GetVMName_Handler,
		},
		{
			MethodName: "GetAllVM",
			Handler:    _VM_GetAllVM_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _VM_AddNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _VM_DeleteNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _VM_StopNode_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _VM_AddGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _VM_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _VM_GetGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSnapshotVM",
			Handler:       _VM_GetSnapshotVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGroupVM",
			Handler:       _VM_GetGroupVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNode",
			Handler:       _VM_GetNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
