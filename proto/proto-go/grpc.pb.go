// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Null struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Null) Reset()         { *m = Null{} }
func (m *Null) String() string { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()    {}
func (*Null) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *Null) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Null.Unmarshal(m, b)
}
func (m *Null) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Null.Marshal(b, m, deterministic)
}
func (m *Null) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Null.Merge(m, src)
}
func (m *Null) XXX_Size() int {
	return xxx_messageInfo_Null.Size(m)
}
func (m *Null) XXX_DiscardUnknown() {
	xxx_messageInfo_Null.DiscardUnknown(m)
}

var xxx_messageInfo_Null proto.InternalMessageInfo

type Base struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Token                string   `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Result               bool     `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *Base) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Base.Unmarshal(m, b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Base.Marshal(b, m, deterministic)
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return xxx_messageInfo_Base.Size(m)
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Base) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *Base) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Base) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Base) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type AuthResult struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Result               bool     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResult) Reset()         { *m = AuthResult{} }
func (m *AuthResult) String() string { return proto.CompactTextString(m) }
func (*AuthResult) ProtoMessage()    {}
func (*AuthResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *AuthResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResult.Unmarshal(m, b)
}
func (m *AuthResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResult.Marshal(b, m, deterministic)
}
func (m *AuthResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResult.Merge(m, src)
}
func (m *AuthResult) XXX_Size() int {
	return xxx_messageInfo_AuthResult.Size(m)
}
func (m *AuthResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResult proto.InternalMessageInfo

func (m *AuthResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type TokenData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Userid               int32    `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Groupid              string   `protobuf:"bytes,4,opt,name=groupid,proto3" json:"groupid,omitempty"`
	Begintime            int64    `protobuf:"varint,5,opt,name=begintime,proto3" json:"begintime,omitempty"`
	Endtime              int64    `protobuf:"varint,6,opt,name=endtime,proto3" json:"endtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenData) Reset()         { *m = TokenData{} }
func (m *TokenData) String() string { return proto.CompactTextString(m) }
func (*TokenData) ProtoMessage()    {}
func (*TokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{3}
}

func (m *TokenData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenData.Unmarshal(m, b)
}
func (m *TokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenData.Marshal(b, m, deterministic)
}
func (m *TokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenData.Merge(m, src)
}
func (m *TokenData) XXX_Size() int {
	return xxx_messageInfo_TokenData.Size(m)
}
func (m *TokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenData.DiscardUnknown(m)
}

var xxx_messageInfo_TokenData proto.InternalMessageInfo

func (m *TokenData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TokenData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenData) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *TokenData) GetGroupid() string {
	if m != nil {
		return m.Groupid
	}
	return ""
}

func (m *TokenData) GetBegintime() int64 {
	if m != nil {
		return m.Begintime
	}
	return 0
}

func (m *TokenData) GetEndtime() int64 {
	if m != nil {
		return m.Endtime
	}
	return 0
}

type VMData struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Node                 int32    `protobuf:"varint,2,opt,name=node,proto3" json:"node,omitempty"`
	Vmname               string   `protobuf:"bytes,3,opt,name=vmname,proto3" json:"vmname,omitempty"`
	Vcpu                 int64    `protobuf:"varint,4,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Vmem                 int64    `protobuf:"varint,5,opt,name=vmem,proto3" json:"vmem,omitempty"`
	Storagetype          int32    `protobuf:"varint,6,opt,name=storagetype,proto3" json:"storagetype,omitempty"`
	Storage              int64    `protobuf:"varint,7,opt,name=storage,proto3" json:"storage,omitempty"`
	Cdrom                string   `protobuf:"bytes,8,opt,name=cdrom,proto3" json:"cdrom,omitempty"`
	Vnet                 string   `protobuf:"bytes,9,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Option               *Option  `protobuf:"bytes,10,opt,name=option,proto3" json:"option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMData) Reset()         { *m = VMData{} }
func (m *VMData) String() string { return proto.CompactTextString(m) }
func (*VMData) ProtoMessage()    {}
func (*VMData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{4}
}

func (m *VMData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMData.Unmarshal(m, b)
}
func (m *VMData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMData.Marshal(b, m, deterministic)
}
func (m *VMData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMData.Merge(m, src)
}
func (m *VMData) XXX_Size() int {
	return xxx_messageInfo_VMData.Size(m)
}
func (m *VMData) XXX_DiscardUnknown() {
	xxx_messageInfo_VMData.DiscardUnknown(m)
}

var xxx_messageInfo_VMData proto.InternalMessageInfo

func (m *VMData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMData) GetNode() int32 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *VMData) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

func (m *VMData) GetVcpu() int64 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *VMData) GetVmem() int64 {
	if m != nil {
		return m.Vmem
	}
	return 0
}

func (m *VMData) GetStoragetype() int32 {
	if m != nil {
		return m.Storagetype
	}
	return 0
}

func (m *VMData) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *VMData) GetCdrom() string {
	if m != nil {
		return m.Cdrom
	}
	return ""
}

func (m *VMData) GetVnet() string {
	if m != nil {
		return m.Vnet
	}
	return ""
}

func (m *VMData) GetOption() *Option {
	if m != nil {
		return m.Option
	}
	return nil
}

type Option struct {
	StoragePath          string   `protobuf:"bytes,1,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	CdromPath            string   `protobuf:"bytes,2,opt,name=cdrom_path,json=cdromPath,proto3" json:"cdrom_path,omitempty"`
	Image                int32    `protobuf:"varint,3,opt,name=image,proto3" json:"image,omitempty"`
	Vnc                  int32    `protobuf:"varint,4,opt,name=vnc,proto3" json:"vnc,omitempty"`
	Id                   int64    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Autostart            bool     `protobuf:"varint,6,opt,name=autostart,proto3" json:"autostart,omitempty"`
	Status               int32    `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{5}
}

func (m *Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Option.Unmarshal(m, b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Option.Marshal(b, m, deterministic)
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return xxx_messageInfo_Option.Size(m)
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *Option) GetCdromPath() string {
	if m != nil {
		return m.CdromPath
	}
	return ""
}

func (m *Option) GetImage() int32 {
	if m != nil {
		return m.Image
	}
	return 0
}

func (m *Option) GetVnc() int32 {
	if m != nil {
		return m.Vnc
	}
	return 0
}

func (m *Option) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Option) GetAutostart() bool {
	if m != nil {
		return m.Autostart
	}
	return false
}

func (m *Option) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type SnapshotOperationData struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Vmid                 int64    `protobuf:"varint,2,opt,name=vmid,proto3" json:"vmid,omitempty"`
	Operation            int32    `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotOperationData) Reset()         { *m = SnapshotOperationData{} }
func (m *SnapshotOperationData) String() string { return proto.CompactTextString(m) }
func (*SnapshotOperationData) ProtoMessage()    {}
func (*SnapshotOperationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{6}
}

func (m *SnapshotOperationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotOperationData.Unmarshal(m, b)
}
func (m *SnapshotOperationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotOperationData.Marshal(b, m, deterministic)
}
func (m *SnapshotOperationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotOperationData.Merge(m, src)
}
func (m *SnapshotOperationData) XXX_Size() int {
	return xxx_messageInfo_SnapshotOperationData.Size(m)
}
func (m *SnapshotOperationData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotOperationData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotOperationData proto.InternalMessageInfo

func (m *SnapshotOperationData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SnapshotOperationData) GetVmid() int64 {
	if m != nil {
		return m.Vmid
	}
	return 0
}

func (m *SnapshotOperationData) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *SnapshotOperationData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type SnapshotData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Size                 string   `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Date                 string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Vmclock              string   `protobuf:"bytes,5,opt,name=vmclock,proto3" json:"vmclock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotData) Reset()         { *m = SnapshotData{} }
func (m *SnapshotData) String() string { return proto.CompactTextString(m) }
func (*SnapshotData) ProtoMessage()    {}
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{7}
}

func (m *SnapshotData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotData.Unmarshal(m, b)
}
func (m *SnapshotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotData.Marshal(b, m, deterministic)
}
func (m *SnapshotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotData.Merge(m, src)
}
func (m *SnapshotData) XXX_Size() int {
	return xxx_messageInfo_SnapshotData.Size(m)
}
func (m *SnapshotData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotData proto.InternalMessageInfo

func (m *SnapshotData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SnapshotData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SnapshotData) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *SnapshotData) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *SnapshotData) GetVmclock() string {
	if m != nil {
		return m.Vmclock
	}
	return ""
}

type VMName struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Vmname               string   `protobuf:"bytes,2,opt,name=vmname,proto3" json:"vmname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMName) Reset()         { *m = VMName{} }
func (m *VMName) String() string { return proto.CompactTextString(m) }
func (*VMName) ProtoMessage()    {}
func (*VMName) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{8}
}

func (m *VMName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMName.Unmarshal(m, b)
}
func (m *VMName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMName.Marshal(b, m, deterministic)
}
func (m *VMName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMName.Merge(m, src)
}
func (m *VMName) XXX_Size() int {
	return xxx_messageInfo_VMName.Size(m)
}
func (m *VMName) XXX_DiscardUnknown() {
	xxx_messageInfo_VMName.DiscardUnknown(m)
}

var xxx_messageInfo_VMName proto.InternalMessageInfo

func (m *VMName) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMName) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

type VMDataResponse struct {
	VMDatas              []*VMData `protobuf:"bytes,1,rep,name=VMDatas,proto3" json:"VMDatas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMDataResponse) Reset()         { *m = VMDataResponse{} }
func (m *VMDataResponse) String() string { return proto.CompactTextString(m) }
func (*VMDataResponse) ProtoMessage()    {}
func (*VMDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{9}
}

func (m *VMDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMDataResponse.Unmarshal(m, b)
}
func (m *VMDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMDataResponse.Marshal(b, m, deterministic)
}
func (m *VMDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMDataResponse.Merge(m, src)
}
func (m *VMDataResponse) XXX_Size() int {
	return xxx_messageInfo_VMDataResponse.Size(m)
}
func (m *VMDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMDataResponse proto.InternalMessageInfo

func (m *VMDataResponse) GetVMDatas() []*VMData {
	if m != nil {
		return m.VMDatas
	}
	return nil
}

type VMID struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMID) Reset()         { *m = VMID{} }
func (m *VMID) String() string { return proto.CompactTextString(m) }
func (*VMID) ProtoMessage()    {}
func (*VMID) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{10}
}

func (m *VMID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMID.Unmarshal(m, b)
}
func (m *VMID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMID.Marshal(b, m, deterministic)
}
func (m *VMID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMID.Merge(m, src)
}
func (m *VMID) XXX_Size() int {
	return xxx_messageInfo_VMID.Size(m)
}
func (m *VMID) XXX_DiscardUnknown() {
	xxx_messageInfo_VMID.DiscardUnknown(m)
}

var xxx_messageInfo_VMID proto.InternalMessageInfo

func (m *VMID) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VMID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Result struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{11}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Result) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type NodeID struct {
	Base                 *Base    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int32    `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeID) Reset()         { *m = NodeID{} }
func (m *NodeID) String() string { return proto.CompactTextString(m) }
func (*NodeID) ProtoMessage()    {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{12}
}

func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeID.Unmarshal(m, b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeID.Marshal(b, m, deterministic)
}
func (m *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(m, src)
}
func (m *NodeID) XXX_Size() int {
	return xxx_messageInfo_NodeID.Size(m)
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *NodeID) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *NodeID) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type NodeData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int32     `protobuf:"varint,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Hostname             string    `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IP                   string    `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	Path                 string    `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	OnlyAdmin            bool      `protobuf:"varint,6,opt,name=onlyAdmin,proto3" json:"onlyAdmin,omitempty"`
	Status               int32     `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Enable               bool      `protobuf:"varint,8,opt,name=enable,proto3" json:"enable,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,9,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeData) Reset()         { *m = NodeData{} }
func (m *NodeData) String() string { return proto.CompactTextString(m) }
func (*NodeData) ProtoMessage()    {}
func (*NodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{13}
}

func (m *NodeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeData.Unmarshal(m, b)
}
func (m *NodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeData.Marshal(b, m, deterministic)
}
func (m *NodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeData.Merge(m, src)
}
func (m *NodeData) XXX_Size() int {
	return xxx_messageInfo_NodeData.Size(m)
}
func (m *NodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeData.DiscardUnknown(m)
}

var xxx_messageInfo_NodeData proto.InternalMessageInfo

func (m *NodeData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *NodeData) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeData) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeData) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *NodeData) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NodeData) GetOnlyAdmin() bool {
	if m != nil {
		return m.OnlyAdmin
	}
	return false
}

func (m *NodeData) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NodeData) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *NodeData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

type UserData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	User                 string    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Pass                 string    `protobuf:"bytes,4,opt,name=pass,proto3" json:"pass,omitempty"`
	Mode                 int32     `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,6,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserData) Reset()         { *m = UserData{} }
func (m *UserData) String() string { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()    {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{14}
}

func (m *UserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserData.Unmarshal(m, b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
}
func (m *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(m, src)
}
func (m *UserData) XXX_Size() int {
	return xxx_messageInfo_UserData.Size(m)
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserData) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserData) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *UserData) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *UserData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

//Get : mode0 <-All mode1 <- Select mode2 <- MyGroup
//Join: mode0 <- Admin mode1 <- User
type GroupData struct {
	Base                 *Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                   int32     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Admin                string    `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	User                 string    `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Mode                 int32     `protobuf:"varint,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Team                 bool      `protobuf:"varint,7,opt,name=team,proto3" json:"team,omitempty"`
	Sepc                 *SpecData `protobuf:"bytes,8,opt,name=sepc,proto3" json:"sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GroupData) Reset()         { *m = GroupData{} }
func (m *GroupData) String() string { return proto.CompactTextString(m) }
func (*GroupData) ProtoMessage()    {}
func (*GroupData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{15}
}

func (m *GroupData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupData.Unmarshal(m, b)
}
func (m *GroupData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupData.Marshal(b, m, deterministic)
}
func (m *GroupData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupData.Merge(m, src)
}
func (m *GroupData) XXX_Size() int {
	return xxx_messageInfo_GroupData.Size(m)
}
func (m *GroupData) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupData.DiscardUnknown(m)
}

var xxx_messageInfo_GroupData proto.InternalMessageInfo

func (m *GroupData) GetBase() *Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GroupData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupData) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *GroupData) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *GroupData) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GroupData) GetTeam() bool {
	if m != nil {
		return m.Team
	}
	return false
}

func (m *GroupData) GetSepc() *SpecData {
	if m != nil {
		return m.Sepc
	}
	return nil
}

type SpecData struct {
	Maxvm                int32    `protobuf:"varint,1,opt,name=maxvm,proto3" json:"maxvm,omitempty"`
	Maxcpu               int32    `protobuf:"varint,2,opt,name=maxcpu,proto3" json:"maxcpu,omitempty"`
	Maxmem               int32    `protobuf:"varint,3,opt,name=maxmem,proto3" json:"maxmem,omitempty"`
	Maxstorage           int32    `protobuf:"varint,4,opt,name=maxstorage,proto3" json:"maxstorage,omitempty"`
	Net                  string   `protobuf:"bytes,5,opt,name=net,proto3" json:"net,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecData) Reset()         { *m = SpecData{} }
func (m *SpecData) String() string { return proto.CompactTextString(m) }
func (*SpecData) ProtoMessage()    {}
func (*SpecData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{16}
}

func (m *SpecData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecData.Unmarshal(m, b)
}
func (m *SpecData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecData.Marshal(b, m, deterministic)
}
func (m *SpecData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecData.Merge(m, src)
}
func (m *SpecData) XXX_Size() int {
	return xxx_messageInfo_SpecData.Size(m)
}
func (m *SpecData) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecData.DiscardUnknown(m)
}

var xxx_messageInfo_SpecData proto.InternalMessageInfo

func (m *SpecData) GetMaxvm() int32 {
	if m != nil {
		return m.Maxvm
	}
	return 0
}

func (m *SpecData) GetMaxcpu() int32 {
	if m != nil {
		return m.Maxcpu
	}
	return 0
}

func (m *SpecData) GetMaxmem() int32 {
	if m != nil {
		return m.Maxmem
	}
	return 0
}

func (m *SpecData) GetMaxstorage() int32 {
	if m != nil {
		return m.Maxstorage
	}
	return 0
}

func (m *SpecData) GetNet() string {
	if m != nil {
		return m.Net
	}
	return ""
}

func init() {
	proto.RegisterType((*Null)(nil), "Null")
	proto.RegisterType((*Base)(nil), "Base")
	proto.RegisterType((*AuthResult)(nil), "AuthResult")
	proto.RegisterType((*TokenData)(nil), "TokenData")
	proto.RegisterType((*VMData)(nil), "VMData")
	proto.RegisterType((*Option)(nil), "Option")
	proto.RegisterType((*SnapshotOperationData)(nil), "SnapshotOperationData")
	proto.RegisterType((*SnapshotData)(nil), "SnapshotData")
	proto.RegisterType((*VMName)(nil), "VMName")
	proto.RegisterType((*VMDataResponse)(nil), "VMDataResponse")
	proto.RegisterType((*VMID)(nil), "VMID")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*NodeID)(nil), "NodeID")
	proto.RegisterType((*NodeData)(nil), "NodeData")
	proto.RegisterType((*UserData)(nil), "UserData")
	proto.RegisterType((*GroupData)(nil), "GroupData")
	proto.RegisterType((*SpecData)(nil), "SpecData")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 1177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x25, 0x92, 0x22, 0x47, 0x8e, 0x5b, 0x6c, 0x53, 0x83, 0x71, 0x1d, 0x5b, 0x66, 0x93,
	0xc0, 0xbd, 0x10, 0xa9, 0xd3, 0x43, 0xd1, 0x9e, 0xdc, 0x18, 0x10, 0x7c, 0xb0, 0x63, 0xd0, 0xa9,
	0xaf, 0xc5, 0x5a, 0xdc, 0x4a, 0x44, 0xc4, 0x1f, 0x90, 0x2b, 0xd5, 0xe9, 0xb1, 0x4f, 0xd0, 0x7b,
	0xdf, 0xa1, 0xe7, 0x02, 0x7d, 0xa3, 0x3e, 0x44, 0x51, 0xcc, 0xec, 0xf2, 0x47, 0x0e, 0x25, 0xbb,
	0xb7, 0x99, 0x6f, 0x67, 0x77, 0xbf, 0xf9, 0xd9, 0x8f, 0x12, 0xc0, 0xb4, 0xc8, 0x27, 0x41, 0x5e,
	0x64, 0x32, 0xf3, 0x6d, 0x30, 0x2f, 0x16, 0xf3, 0xb9, 0x5f, 0x80, 0xf9, 0x03, 0x2f, 0x05, 0x63,
	0x60, 0x2e, 0x4a, 0x51, 0x78, 0xc6, 0xc8, 0x38, 0x72, 0x43, 0xb2, 0x11, 0xcb, 0x79, 0x59, 0x7a,
	0x3d, 0x85, 0xa1, 0xcd, 0x9e, 0x80, 0x35, 0x2d, 0xb2, 0x45, 0xee, 0xf5, 0x09, 0x54, 0x0e, 0xa2,
	0x32, 0x7b, 0x2f, 0x52, 0xcf, 0x54, 0x28, 0x39, 0x6c, 0x07, 0xec, 0x42, 0x94, 0x8b, 0xb9, 0xf4,
	0xac, 0x91, 0x71, 0xe4, 0x84, 0xda, 0xf3, 0xbf, 0x03, 0x38, 0x59, 0xc8, 0x59, 0x48, 0x5e, 0xb3,
	0xd7, 0xe8, 0xde, 0xdb, 0x5b, 0xd9, 0xfb, 0x87, 0x01, 0xee, 0x3b, 0x8c, 0x38, 0xe5, 0x92, 0xb3,
	0x6d, 0xe8, 0xc5, 0x11, 0x6d, 0xec, 0x87, 0xbd, 0x38, 0x6a, 0xce, 0xea, 0xdd, 0x39, 0x0b, 0xf3,
	0x89, 0x23, 0x22, 0x6d, 0x85, 0xda, 0x63, 0x1e, 0x0c, 0x88, 0x7e, 0x1c, 0x69, 0xde, 0x95, 0xcb,
	0xf6, 0xc0, 0xbd, 0x11, 0xd3, 0x38, 0x95, 0x71, 0x22, 0x88, 0x7c, 0x3f, 0x6c, 0x00, 0xdc, 0x27,
	0xd2, 0x88, 0xd6, 0x6c, 0x5a, 0xab, 0x5c, 0xff, 0x5f, 0x03, 0xec, 0xeb, 0x73, 0xa2, 0xf6, 0x14,
	0xcc, 0x1b, 0x5e, 0x0a, 0x22, 0x37, 0x3c, 0xb6, 0x02, 0xac, 0x72, 0x48, 0x10, 0xd6, 0x35, 0xcd,
	0x22, 0x41, 0x24, 0xad, 0x90, 0x6c, 0xe4, 0xb8, 0x4c, 0x52, 0x9e, 0x08, 0x5d, 0x58, 0xed, 0x61,
	0xec, 0x72, 0x92, 0x2f, 0x88, 0x60, 0x3f, 0x24, 0x9b, 0xb0, 0x44, 0x24, 0x9a, 0x18, 0xd9, 0x6c,
	0x04, 0xc3, 0x52, 0x66, 0x05, 0x9f, 0x0a, 0xf9, 0x21, 0x57, 0xbc, 0xac, 0xb0, 0x0d, 0x21, 0x6b,
	0xed, 0x7a, 0x03, 0xc5, 0x5a, 0xbb, 0x58, 0xb5, 0x49, 0x54, 0x64, 0x89, 0xe7, 0xa8, 0xaa, 0x91,
	0x43, 0xb7, 0xa4, 0x42, 0x7a, 0xae, 0xea, 0x3e, 0xda, 0xec, 0x00, 0xec, 0x2c, 0x97, 0x71, 0x96,
	0x7a, 0x40, 0x69, 0x0d, 0x82, 0xb7, 0xe4, 0x86, 0x1a, 0xf6, 0xff, 0x32, 0xc0, 0x56, 0x10, 0x3b,
	0x84, 0x2d, 0x7d, 0xc1, 0x4f, 0x39, 0x97, 0x33, 0xdd, 0xde, 0x8a, 0xd2, 0x25, 0x97, 0x33, 0xf6,
	0x0c, 0x80, 0xee, 0x52, 0x01, 0xaa, 0x67, 0x2e, 0x21, 0xb4, 0xfc, 0x04, 0xac, 0x38, 0x41, 0xbe,
	0xaa, 0x6d, 0xca, 0x61, 0x9f, 0x42, 0x7f, 0x99, 0x4e, 0xa8, 0x20, 0x56, 0x88, 0xa6, 0x9e, 0x02,
	0xab, 0x9e, 0x82, 0x3d, 0x70, 0xf9, 0x42, 0x66, 0xa5, 0xe4, 0x85, 0xa4, 0x4a, 0x38, 0x61, 0x03,
	0x60, 0xa5, 0x4b, 0xc9, 0xe5, 0xa2, 0xa4, 0x32, 0x58, 0xa1, 0xf6, 0xfc, 0x25, 0x7c, 0x7e, 0x95,
	0xf2, 0xbc, 0x9c, 0x65, 0xf2, 0x6d, 0x2e, 0x0a, 0x8e, 0x49, 0x3c, 0xa0, 0x93, 0xcb, 0x24, 0x8e,
	0x88, 0x3a, 0x75, 0x42, 0xdd, 0x9e, 0x55, 0xfb, 0x35, 0xf3, 0x06, 0x40, 0xf6, 0x92, 0x4f, 0xf5,
	0xbc, 0xa1, 0xe9, 0x17, 0xb0, 0x55, 0xdd, 0xdb, 0x39, 0xd3, 0x7a, 0x47, 0xaf, 0xde, 0x81, 0xb7,
	0x96, 0xf1, 0xaf, 0xd5, 0xa4, 0x90, 0x8d, 0x58, 0xc4, 0xa5, 0xd0, 0x07, 0x93, 0x8d, 0x1d, 0x5f,
	0x26, 0x93, 0x79, 0x36, 0x79, 0x4f, 0xc5, 0x71, 0xc3, 0xca, 0xf5, 0xbf, 0xc7, 0x31, 0xbd, 0xc0,
	0xf9, 0xda, 0x90, 0x5c, 0x33, 0x92, 0xbd, 0xf6, 0x48, 0xfa, 0xaf, 0x61, 0x5b, 0xcd, 0x78, 0x28,
	0xca, 0x3c, 0x4b, 0x4b, 0xc1, 0x0e, 0x61, 0xa0, 0x90, 0xd2, 0x33, 0x46, 0x7d, 0x9a, 0x0b, 0x1d,
	0x51, 0xe1, 0xfe, 0xd7, 0x60, 0x5e, 0x9f, 0x9f, 0x9d, 0x6e, 0xba, 0x4f, 0x25, 0xde, 0xab, 0x12,
	0xf7, 0xbf, 0x01, 0x5b, 0x4b, 0x44, 0xd3, 0x32, 0x43, 0x89, 0x81, 0xf2, 0x30, 0xe9, 0x38, 0xfd,
	0x39, 0xab, 0x04, 0x0a, 0x6d, 0x4c, 0xed, 0x22, 0x8b, 0xc4, 0xe6, 0xab, 0x76, 0xaa, 0x20, 0xfd,
	0x06, 0xb5, 0xe7, 0xff, 0x63, 0x80, 0x83, 0xe6, 0x7d, 0x7d, 0x5f, 0xb3, 0x9f, 0xed, 0x82, 0x33,
	0xcb, 0x4a, 0xd9, 0x7a, 0xc7, 0xb5, 0x8f, 0xe9, 0x9d, 0x5d, 0xea, 0xfe, 0xf4, 0xce, 0x2e, 0x95,
	0xba, 0xca, 0x99, 0x6e, 0x0d, 0xd9, 0x34, 0x3b, 0xe9, 0xfc, 0xc3, 0x49, 0x94, 0xc4, 0x69, 0x35,
	0xb9, 0x35, 0xb0, 0x6e, 0x72, 0x11, 0x17, 0x29, 0xbf, 0x99, 0x0b, 0x7a, 0xc0, 0x4e, 0xa8, 0x3d,
	0xf6, 0x0c, 0xcc, 0x52, 0xe4, 0x13, 0x7a, 0xc1, 0xc3, 0x63, 0x37, 0xb8, 0xca, 0xc5, 0x84, 0xba,
	0x42, 0xb0, 0xff, 0xbb, 0x01, 0xce, 0x8f, 0xa5, 0x28, 0xee, 0x4b, 0xf6, 0x4e, 0x5f, 0xea, 0x4f,
	0x45, 0xbf, 0xe3, 0x53, 0x61, 0xb6, 0x3e, 0x15, 0x0c, 0xcc, 0x04, 0x65, 0xce, 0x52, 0x32, 0x87,
	0x76, 0x4d, 0xc9, 0xee, 0xa6, 0xf4, 0xb7, 0x01, 0xee, 0x18, 0x35, 0xf8, 0xe1, 0x9c, 0xac, 0x8a,
	0x53, 0xab, 0xe8, 0x64, 0xa3, 0x7c, 0x70, 0x2a, 0xa4, 0xfe, 0x28, 0x91, 0x53, 0xb3, 0xb7, 0x56,
	0xd9, 0x13, 0x53, 0xbb, 0xc5, 0x94, 0x81, 0x29, 0x05, 0x4f, 0xa8, 0xd4, 0x4e, 0x48, 0x76, 0xcd,
	0xde, 0xe9, 0x66, 0xff, 0x9b, 0x01, 0x4e, 0x05, 0xe1, 0xed, 0x09, 0xbf, 0x5d, 0x26, 0xc4, 0xde,
	0x0a, 0x95, 0x83, 0xad, 0x4a, 0xf8, 0x2d, 0x0a, 0xba, 0x1e, 0x1c, 0xe5, 0x69, 0x1c, 0x45, 0xbd,
	0x5f, 0xe3, 0x28, 0xeb, 0xfb, 0x00, 0x09, 0xbf, 0xad, 0x74, 0x5b, 0x69, 0x5e, 0x0b, 0x41, 0x71,
	0x40, 0x8d, 0x56, 0xc9, 0xa0, 0x79, 0xfc, 0xa7, 0x0b, 0x26, 0x7e, 0xe7, 0xd9, 0x3e, 0x38, 0x6f,
	0x0a, 0xc1, 0xa5, 0xb8, 0x3e, 0x67, 0xd5, 0x7b, 0xdc, 0x1d, 0x04, 0xea, 0x49, 0xf9, 0x8f, 0xd8,
	0x1e, 0x38, 0xa7, 0x62, 0x2e, 0x68, 0xdd, 0x0a, 0xf0, 0x71, 0xb6, 0x57, 0xbf, 0x80, 0xc1, 0x15,
	0xca, 0x65, 0xe7, 0xe2, 0x2e, 0xd8, 0x57, 0x32, 0xcb, 0x3b, 0xd7, 0xf6, 0x01, 0xae, 0x66, 0x0b,
	0x19, 0x65, 0xbf, 0xa4, 0xeb, 0x0e, 0x0e, 0x45, 0x29, 0xe4, 0xba, 0xc5, 0x4b, 0xbe, 0x28, 0xbb,
	0x29, 0xed, 0x81, 0x83, 0x76, 0xd2, 0xbd, 0xfa, 0x15, 0x3c, 0x1e, 0x0b, 0x59, 0x29, 0x69, 0x13,
	0xf2, 0x38, 0x68, 0xab, 0xab, 0xff, 0xe8, 0x95, 0xc1, 0xbe, 0x85, 0xcf, 0x3e, 0x52, 0xfa, 0xeb,
	0x73, 0xb6, 0x13, 0x74, 0xea, 0x7f, 0xfb, 0x92, 0xa7, 0x60, 0x8d, 0x57, 0xa9, 0xab, 0xba, 0xfa,
	0x8f, 0xd8, 0x01, 0xb8, 0xb4, 0x44, 0xaa, 0x8a, 0x38, 0x1a, 0xed, 0x80, 0x11, 0xc0, 0x58, 0x48,
	0x9a, 0x6e, 0x3a, 0x00, 0xa7, 0xb9, 0xb5, 0xfe, 0xca, 0xc0, 0x8e, 0x8d, 0x85, 0x3c, 0x99, 0xcf,
	0xd7, 0xac, 0x1f, 0xc0, 0xe0, 0x24, 0x8a, 0x50, 0x6a, 0x98, 0x1b, 0x54, 0x32, 0xd5, 0xa6, 0x77,
	0x00, 0x83, 0xb1, 0x90, 0x14, 0xa0, 0xf7, 0x37, 0x71, 0x74, 0xc2, 0x08, 0x20, 0x14, 0x49, 0xb6,
	0x14, 0x14, 0x33, 0x08, 0x94, 0x6c, 0xad, 0x1e, 0xe1, 0x52, 0xdf, 0xd7, 0x06, 0xec, 0x83, 0x83,
	0xbd, 0xdf, 0x70, 0x00, 0x92, 0x44, 0x5d, 0x61, 0x6e, 0x50, 0xc9, 0x4b, 0x3b, 0xc0, 0xaf, 0x38,
	0x6c, 0x88, 0xf9, 0x92, 0x12, 0xb9, 0x1b, 0xd0, 0x98, 0x94, 0xcc, 0x73, 0xd8, 0x7a, 0x27, 0x4a,
	0x8a, 0xba, 0x44, 0xbd, 0xe9, 0x3e, 0xea, 0x25, 0x6c, 0xbf, 0x99, 0xf1, 0x74, 0x2a, 0xfe, 0x4f,
	0x1c, 0x35, 0xb1, 0x3b, 0xee, 0x10, 0x9c, 0x93, 0x28, 0xa2, 0x36, 0x32, 0x08, 0x6a, 0xb1, 0x6a,
	0x87, 0x3c, 0x87, 0xa1, 0xca, 0x70, 0x63, 0xd4, 0x4b, 0xea, 0xf6, 0xc7, 0x21, 0x2d, 0x9b, 0xd2,
	0x7c, 0x01, 0x5b, 0xc8, 0xe3, 0xbe, 0x4b, 0x8f, 0xe0, 0x13, 0x0c, 0x7b, 0xc0, 0xc5, 0x2f, 0xf0,
	0xa5, 0xa4, 0x38, 0xe1, 0x82, 0x7e, 0x49, 0x57, 0xb3, 0x32, 0x0c, 0x9a, 0x5f, 0xe5, 0xd4, 0xc8,
	0xa1, 0xd2, 0x87, 0x95, 0xa0, 0xd5, 0x34, 0xd5, 0xb8, 0xae, 0x04, 0x40, 0x50, 0xff, 0x3c, 0xd7,
	0x43, 0x8b, 0x69, 0xae, 0x0f, 0xb9, 0xb1, 0xe9, 0x0f, 0xc9, 0xeb, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xca, 0xbe, 0xd6, 0x9f, 0x9e, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcClient interface {
	CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (Grpc_GetSnapshotVMClient, error)
	SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error)
	GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error)
	GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error)
	GetGroupVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetGroupVMClient, error)
	GetAllVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetAllVMClient, error)
	AddNode(ctx context.Context, in *NodeData, opts ...grpc.CallOption) (*Result, error)
	GetNode(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetNodeClient, error)
	RemoveNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error)
	StartNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error)
	StopNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error)
	AddUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	RemoveUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	GetUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (Grpc_GetUserClient, error)
	TestUserPass(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	ChangeUserPass(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	ChangeUserName(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	RemoveGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (Grpc_GetGroupClient, error)
	UserAddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	UserRemoveGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	GenerateToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*AuthResult, error)
	DeleteToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Result, error)
	GetAllToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetAllTokenClient, error)
	GetToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*TokenData, error)
}

type grpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcClient(cc grpc.ClientConnInterface) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/ShutdownVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/ResetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/PauseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/ResumeVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (Grpc_GetSnapshotVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[0], "/grpc/GetSnapshotVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetSnapshotVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetSnapshotVMClient interface {
	Recv() (*SnapshotData, error)
	grpc.ClientStream
}

type grpcGetSnapshotVMClient struct {
	grpc.ClientStream
}

func (x *grpcGetSnapshotVMClient) Recv() (*SnapshotData, error) {
	m := new(SnapshotData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/SnapshotOperationVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/grpc/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/grpc/GetVMName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetGroupVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetGroupVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[1], "/grpc/GetGroupVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetGroupVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetGroupVMClient interface {
	Recv() (*VMData, error)
	grpc.ClientStream
}

type grpcGetGroupVMClient struct {
	grpc.ClientStream
}

func (x *grpcGetGroupVMClient) Recv() (*VMData, error) {
	m := new(VMData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) GetAllVM(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetAllVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[2], "/grpc/GetAllVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetAllVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetAllVMClient interface {
	Recv() (*VMData, error)
	grpc.ClientStream
}

type grpcGetAllVMClient struct {
	grpc.ClientStream
}

func (x *grpcGetAllVMClient) Recv() (*VMData, error) {
	m := new(VMData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) AddNode(ctx context.Context, in *NodeData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetNode(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[3], "/grpc/GetNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetNodeClient interface {
	Recv() (*NodeData, error)
	grpc.ClientStream
}

type grpcGetNodeClient struct {
	grpc.ClientStream
}

func (x *grpcGetNodeClient) Recv() (*NodeData, error) {
	m := new(NodeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) RemoveNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) StartNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/StartNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) StopNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) AddUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) RemoveUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (Grpc_GetUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[4], "/grpc/GetUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetUserClient interface {
	Recv() (*UserData, error)
	grpc.ClientStream
}

type grpcGetUserClient struct {
	grpc.ClientStream
}

func (x *grpcGetUserClient) Recv() (*UserData, error) {
	m := new(UserData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) TestUserPass(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/TestUserPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ChangeUserPass(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/ChangeUserPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ChangeUserName(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/ChangeUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) RemoveGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/RemoveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (Grpc_GetGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[5], "/grpc/GetGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetGroupClient interface {
	Recv() (*GroupData, error)
	grpc.ClientStream
}

type grpcGetGroupClient struct {
	grpc.ClientStream
}

func (x *grpcGetGroupClient) Recv() (*GroupData, error) {
	m := new(GroupData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) UserAddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/UserAddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) UserRemoveGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/UserRemoveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GenerateToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*AuthResult, error) {
	out := new(AuthResult)
	err := c.cc.Invoke(ctx, "/grpc/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) DeleteToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetAllToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (Grpc_GetAllTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[6], "/grpc/GetAllToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcGetAllTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_GetAllTokenClient interface {
	Recv() (*TokenData, error)
	grpc.ClientStream
}

type grpcGetAllTokenClient struct {
	grpc.ClientStream
}

func (x *grpcGetAllTokenClient) Recv() (*TokenData, error) {
	m := new(TokenData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) GetToken(ctx context.Context, in *Base, opts ...grpc.CallOption) (*TokenData, error) {
	out := new(TokenData)
	err := c.cc.Invoke(ctx, "/grpc/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
type GrpcServer interface {
	CreateVM(context.Context, *VMData) (*Result, error)
	DeleteVM(context.Context, *VMID) (*Result, error)
	StartVM(context.Context, *VMID) (*Result, error)
	StopVM(context.Context, *VMID) (*Result, error)
	ShutdownVM(context.Context, *VMID) (*Result, error)
	ResetVM(context.Context, *VMID) (*Result, error)
	PauseVM(context.Context, *VMID) (*Result, error)
	ResumeVM(context.Context, *VMID) (*Result, error)
	GetSnapshotVM(*VMID, Grpc_GetSnapshotVMServer) error
	SnapshotOperationVM(context.Context, *SnapshotOperationData) (*Result, error)
	GetVM(context.Context, *VMID) (*VMData, error)
	GetVMName(context.Context, *VMName) (*VMData, error)
	GetGroupVM(*Base, Grpc_GetGroupVMServer) error
	GetAllVM(*Base, Grpc_GetAllVMServer) error
	AddNode(context.Context, *NodeData) (*Result, error)
	GetNode(*Base, Grpc_GetNodeServer) error
	RemoveNode(context.Context, *NodeID) (*Result, error)
	StartNode(context.Context, *NodeID) (*Result, error)
	StopNode(context.Context, *NodeID) (*Result, error)
	AddUser(context.Context, *UserData) (*Result, error)
	RemoveUser(context.Context, *UserData) (*Result, error)
	GetUser(*UserData, Grpc_GetUserServer) error
	TestUserPass(context.Context, *UserData) (*Result, error)
	ChangeUserPass(context.Context, *UserData) (*Result, error)
	ChangeUserName(context.Context, *UserData) (*Result, error)
	AddGroup(context.Context, *GroupData) (*Result, error)
	RemoveGroup(context.Context, *GroupData) (*Result, error)
	GetGroup(*GroupData, Grpc_GetGroupServer) error
	UserAddGroup(context.Context, *GroupData) (*Result, error)
	UserRemoveGroup(context.Context, *GroupData) (*Result, error)
	GenerateToken(context.Context, *Base) (*AuthResult, error)
	DeleteToken(context.Context, *Base) (*Result, error)
	GetAllToken(*Base, Grpc_GetAllTokenServer) error
	GetToken(context.Context, *Base) (*TokenData, error)
}

// UnimplementedGrpcServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (*UnimplementedGrpcServer) CreateVM(ctx context.Context, req *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedGrpcServer) DeleteVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedGrpcServer) StartVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (*UnimplementedGrpcServer) StopVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (*UnimplementedGrpcServer) ShutdownVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVM not implemented")
}
func (*UnimplementedGrpcServer) ResetVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVM not implemented")
}
func (*UnimplementedGrpcServer) PauseVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (*UnimplementedGrpcServer) ResumeVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (*UnimplementedGrpcServer) GetSnapshotVM(req *VMID, srv Grpc_GetSnapshotVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshotVM not implemented")
}
func (*UnimplementedGrpcServer) SnapshotOperationVM(ctx context.Context, req *SnapshotOperationData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotOperationVM not implemented")
}
func (*UnimplementedGrpcServer) GetVM(ctx context.Context, req *VMID) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedGrpcServer) GetVMName(ctx context.Context, req *VMName) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMName not implemented")
}
func (*UnimplementedGrpcServer) GetGroupVM(req *Base, srv Grpc_GetGroupVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupVM not implemented")
}
func (*UnimplementedGrpcServer) GetAllVM(req *Base, srv Grpc_GetAllVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllVM not implemented")
}
func (*UnimplementedGrpcServer) AddNode(ctx context.Context, req *NodeData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedGrpcServer) GetNode(req *Base, srv Grpc_GetNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedGrpcServer) RemoveNode(ctx context.Context, req *NodeID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (*UnimplementedGrpcServer) StartNode(ctx context.Context, req *NodeID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNode not implemented")
}
func (*UnimplementedGrpcServer) StopNode(ctx context.Context, req *NodeID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (*UnimplementedGrpcServer) AddUser(ctx context.Context, req *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedGrpcServer) RemoveUser(ctx context.Context, req *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedGrpcServer) GetUser(req *UserData, srv Grpc_GetUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedGrpcServer) TestUserPass(ctx context.Context, req *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserPass not implemented")
}
func (*UnimplementedGrpcServer) ChangeUserPass(ctx context.Context, req *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPass not implemented")
}
func (*UnimplementedGrpcServer) ChangeUserName(ctx context.Context, req *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserName not implemented")
}
func (*UnimplementedGrpcServer) AddGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedGrpcServer) RemoveGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroup not implemented")
}
func (*UnimplementedGrpcServer) GetGroup(req *GroupData, srv Grpc_GetGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedGrpcServer) UserAddGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddGroup not implemented")
}
func (*UnimplementedGrpcServer) UserRemoveGroup(ctx context.Context, req *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRemoveGroup not implemented")
}
func (*UnimplementedGrpcServer) GenerateToken(ctx context.Context, req *Base) (*AuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (*UnimplementedGrpcServer) DeleteToken(ctx context.Context, req *Base) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedGrpcServer) GetAllToken(req *Base, srv Grpc_GetAllTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllToken not implemented")
}
func (*UnimplementedGrpcServer) GetToken(ctx context.Context, req *Base) (*TokenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterGrpcServer(s *grpc.Server, srv GrpcServer) {
	s.RegisterService(&_Grpc_serviceDesc, srv)
}

func _Grpc_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).CreateVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/ShutdownVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ShutdownVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ResetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ResetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/ResetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ResetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/PauseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).PauseVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/ResumeVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ResumeVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetSnapshotVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetSnapshotVM(m, &grpcGetSnapshotVMServer{stream})
}

type Grpc_GetSnapshotVMServer interface {
	Send(*SnapshotData) error
	grpc.ServerStream
}

type grpcGetSnapshotVMServer struct {
	grpc.ServerStream
}

func (x *grpcGetSnapshotVMServer) Send(m *SnapshotData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_SnapshotOperationVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotOperationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).SnapshotOperationVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/SnapshotOperationVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).SnapshotOperationVM(ctx, req.(*SnapshotOperationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetVMName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetVMName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/GetVMName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetVMName(ctx, req.(*VMName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetGroupVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetGroupVM(m, &grpcGetGroupVMServer{stream})
}

type Grpc_GetGroupVMServer interface {
	Send(*VMData) error
	grpc.ServerStream
}

type grpcGetGroupVMServer struct {
	grpc.ServerStream
}

func (x *grpcGetGroupVMServer) Send(m *VMData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_GetAllVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetAllVM(m, &grpcGetAllVMServer{stream})
}

type Grpc_GetAllVMServer interface {
	Send(*VMData) error
	grpc.ServerStream
}

type grpcGetAllVMServer struct {
	grpc.ServerStream
}

func (x *grpcGetAllVMServer) Send(m *VMData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).AddNode(ctx, req.(*NodeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetNode(m, &grpcGetNodeServer{stream})
}

type Grpc_GetNodeServer interface {
	Send(*NodeData) error
	grpc.ServerStream
}

type grpcGetNodeServer struct {
	grpc.ServerStream
}

func (x *grpcGetNodeServer) Send(m *NodeData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).RemoveNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/StartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).StartNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).StopNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).AddUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).RemoveUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetUser(m, &grpcGetUserServer{stream})
}

type Grpc_GetUserServer interface {
	Send(*UserData) error
	grpc.ServerStream
}

type grpcGetUserServer struct {
	grpc.ServerStream
}

func (x *grpcGetUserServer) Send(m *UserData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_TestUserPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).TestUserPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/TestUserPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).TestUserPass(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ChangeUserPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ChangeUserPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/ChangeUserPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ChangeUserPass(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ChangeUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ChangeUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/ChangeUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ChangeUserName(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).AddGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_RemoveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).RemoveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/RemoveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).RemoveGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetGroup(m, &grpcGetGroupServer{stream})
}

type Grpc_GetGroupServer interface {
	Send(*GroupData) error
	grpc.ServerStream
}

type grpcGetGroupServer struct {
	grpc.ServerStream
}

func (x *grpcGetGroupServer) Send(m *GroupData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_UserAddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).UserAddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/UserAddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).UserAddGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_UserRemoveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).UserRemoveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/UserRemoveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).UserRemoveGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GenerateToken(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).DeleteToken(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetAllToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Base)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).GetAllToken(m, &grpcGetAllTokenServer{stream})
}

type Grpc_GetAllTokenServer interface {
	Send(*TokenData) error
	grpc.ServerStream
}

type grpcGetAllTokenServer struct {
	grpc.ServerStream
}

func (x *grpcGetAllTokenServer) Send(m *TokenData) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetToken(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _Grpc_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _Grpc_DeleteVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _Grpc_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _Grpc_StopVM_Handler,
		},
		{
			MethodName: "ShutdownVM",
			Handler:    _Grpc_ShutdownVM_Handler,
		},
		{
			MethodName: "ResetVM",
			Handler:    _Grpc_ResetVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _Grpc_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _Grpc_ResumeVM_Handler,
		},
		{
			MethodName: "SnapshotOperationVM",
			Handler:    _Grpc_SnapshotOperationVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _Grpc_GetVM_Handler,
		},
		{
			MethodName: "GetVMName",
			Handler:    _Grpc_GetVMName_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Grpc_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Grpc_RemoveNode_Handler,
		},
		{
			MethodName: "StartNode",
			Handler:    _Grpc_StartNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _Grpc_StopNode_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Grpc_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Grpc_RemoveUser_Handler,
		},
		{
			MethodName: "TestUserPass",
			Handler:    _Grpc_TestUserPass_Handler,
		},
		{
			MethodName: "ChangeUserPass",
			Handler:    _Grpc_ChangeUserPass_Handler,
		},
		{
			MethodName: "ChangeUserName",
			Handler:    _Grpc_ChangeUserName_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Grpc_AddGroup_Handler,
		},
		{
			MethodName: "RemoveGroup",
			Handler:    _Grpc_RemoveGroup_Handler,
		},
		{
			MethodName: "UserAddGroup",
			Handler:    _Grpc_UserAddGroup_Handler,
		},
		{
			MethodName: "UserRemoveGroup",
			Handler:    _Grpc_UserRemoveGroup_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _Grpc_GenerateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Grpc_DeleteToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Grpc_GetToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSnapshotVM",
			Handler:       _Grpc_GetSnapshotVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGroupVM",
			Handler:       _Grpc_GetGroupVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllVM",
			Handler:       _Grpc_GetAllVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNode",
			Handler:       _Grpc_GetNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUser",
			Handler:       _Grpc_GetUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGroup",
			Handler:       _Grpc_GetGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllToken",
			Handler:       _Grpc_GetAllToken_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
