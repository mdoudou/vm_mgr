// Code generated by protoc-gen-go. DO NOT EDIT.
// source: virtualmachine.proto-go

package virtualmachine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto-go package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto-go package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto-go package

type VMData struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Vmname               string   `protobuf:"bytes,2,opt,name=vmname,proto3" json:"vmname,omitempty"`
	Vcpu                 int32    `protobuf:"varint,3,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Vmem                 int32    `protobuf:"varint,4,opt,name=vmem,proto3" json:"vmem,omitempty"`
	Vnet                 string   `protobuf:"bytes,5,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Vnc                  int32    `protobuf:"varint,6,opt,name=vnc,proto3" json:"vnc,omitempty"`
	Storage              string   `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMData) Reset()         { *m = VMData{} }
func (m *VMData) String() string { return proto.CompactTextString(m) }
func (*VMData) ProtoMessage()    {}
func (*VMData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{0}
}

func (m *VMData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMData.Unmarshal(m, b)
}
func (m *VMData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMData.Marshal(b, m, deterministic)
}
func (m *VMData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMData.Merge(m, src)
}
func (m *VMData) XXX_Size() int {
	return xxx_messageInfo_VMData.Size(m)
}
func (m *VMData) XXX_DiscardUnknown() {
	xxx_messageInfo_VMData.DiscardUnknown(m)
}

var xxx_messageInfo_VMData proto.InternalMessageInfo

func (m *VMData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VMData) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

func (m *VMData) GetVcpu() int32 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *VMData) GetVmem() int32 {
	if m != nil {
		return m.Vmem
	}
	return 0
}

func (m *VMData) GetVnet() string {
	if m != nil {
		return m.Vnet
	}
	return ""
}

func (m *VMData) GetVnc() int32 {
	if m != nil {
		return m.Vnc
	}
	return 0
}

func (m *VMData) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

type VMName struct {
	Vmname               string   `protobuf:"bytes,1,opt,name=vmname,proto3" json:"vmname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMName) Reset()         { *m = VMName{} }
func (m *VMName) String() string { return proto.CompactTextString(m) }
func (*VMName) ProtoMessage()    {}
func (*VMName) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{1}
}

func (m *VMName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMName.Unmarshal(m, b)
}
func (m *VMName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMName.Marshal(b, m, deterministic)
}
func (m *VMName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMName.Merge(m, src)
}
func (m *VMName) XXX_Size() int {
	return xxx_messageInfo_VMName.Size(m)
}
func (m *VMName) XXX_DiscardUnknown() {
	xxx_messageInfo_VMName.DiscardUnknown(m)
}

var xxx_messageInfo_VMName proto.InternalMessageInfo

func (m *VMName) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

type VMDataResponse struct {
	VMDatas              []*VMData `protobuf:"bytes,1,rep,name=VMDatas,proto3" json:"VMDatas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMDataResponse) Reset()         { *m = VMDataResponse{} }
func (m *VMDataResponse) String() string { return proto.CompactTextString(m) }
func (*VMDataResponse) ProtoMessage()    {}
func (*VMDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{2}
}

func (m *VMDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMDataResponse.Unmarshal(m, b)
}
func (m *VMDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMDataResponse.Marshal(b, m, deterministic)
}
func (m *VMDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMDataResponse.Merge(m, src)
}
func (m *VMDataResponse) XXX_Size() int {
	return xxx_messageInfo_VMDataResponse.Size(m)
}
func (m *VMDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMDataResponse proto.InternalMessageInfo

func (m *VMDataResponse) GetVMDatas() []*VMData {
	if m != nil {
		return m.VMDatas
	}
	return nil
}

type VMID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMID) Reset()         { *m = VMID{} }
func (m *VMID) String() string { return proto.CompactTextString(m) }
func (*VMID) ProtoMessage()    {}
func (*VMID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{3}
}

func (m *VMID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMID.Unmarshal(m, b)
}
func (m *VMID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMID.Marshal(b, m, deterministic)
}
func (m *VMID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMID.Merge(m, src)
}
func (m *VMID) XXX_Size() int {
	return xxx_messageInfo_VMID.Size(m)
}
func (m *VMID) XXX_DiscardUnknown() {
	xxx_messageInfo_VMID.DiscardUnknown(m)
}

var xxx_messageInfo_VMID proto.InternalMessageInfo

func (m *VMID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Result struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{4}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*VMData)(nil), "VMData")
	proto.RegisterType((*VMName)(nil), "VMName")
	proto.RegisterType((*VMDataResponse)(nil), "VMDataResponse")
	proto.RegisterType((*VMID)(nil), "VMID")
	proto.RegisterType((*Result)(nil), "Result")
}

func init() { proto.RegisterFile("virtualmachine.proto-go", fileDescriptor_f620cdfcc6a9426c) }

var fileDescriptor_f620cdfcc6a9426c = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0xed, 0x96, 0x02, 0xed, 0x98, 0x34, 0x66, 0x63, 0x9a, 0xd5, 0x18, 0xc5, 0x3d, 0xf5, 0xc4,
	0xa1, 0xfd, 0x84, 0x92, 0x18, 0x0f, 0x78, 0xe0, 0xc0, 0x7d, 0xa5, 0x13, 0x25, 0x61, 0x81, 0xb0,
	0x0b, 0x57, 0x7f, 0xc3, 0xcf, 0x35, 0x3b, 0x40, 0x24, 0xde, 0xde, 0xbc, 0xf7, 0x76, 0xde, 0x9b,
	0x2c, 0xdc, 0x0d, 0x65, 0x67, 0x7b, 0x55, 0x69, 0x55, 0x7c, 0x95, 0x35, 0xc6, 0x6d, 0xd7, 0xd8,
	0x46, 0xfe, 0x30, 0x08, 0xf2, 0x34, 0x51, 0x56, 0xf1, 0x3d, 0xac, 0xcb, 0xab, 0x60, 0x11, 0x3b,
	0xfa, 0xd9, 0xba, 0xbc, 0xf2, 0x03, 0x04, 0x83, 0xae, 0x95, 0x46, 0xb1, 0x8e, 0xd8, 0x71, 0x97,
	0x4d, 0x13, 0xe7, 0xb0, 0x19, 0x8a, 0xb6, 0x17, 0x1e, 0x39, 0x09, 0x13, 0xa7, 0x51, 0x8b, 0xcd,
	0xc4, 0x69, 0xd4, 0xc4, 0xd5, 0x68, 0x85, 0x4f, 0xaf, 0x09, 0xf3, 0x5b, 0xf0, 0x86, 0xba, 0x10,
	0x01, 0xd9, 0x1c, 0xe4, 0x02, 0x42, 0x63, 0x9b, 0x4e, 0x7d, 0xa2, 0x08, 0xc9, 0x38, 0x8f, 0x32,
	0x72, 0xcd, 0xde, 0x5d, 0xe2, 0x5f, 0x13, 0xb6, 0x6c, 0x22, 0xcf, 0xb0, 0x1f, 0xbb, 0x67, 0x68,
	0xda, 0xa6, 0x36, 0xc8, 0x5f, 0x20, 0x1c, 0x19, 0x23, 0x58, 0xe4, 0x1d, 0x6f, 0x4e, 0x61, 0x3c,
	0x39, 0x66, 0x5e, 0x1e, 0x60, 0x93, 0xa7, 0x6f, 0xc9, 0xff, 0x73, 0x5d, 0x5c, 0x86, 0xa6, 0xaf,
	0xac, 0x8b, 0x33, 0x56, 0xd9, 0xde, 0x90, 0xba, 0xcd, 0xa6, 0xe9, 0xf4, 0x0d, 0xde, 0x45, 0x59,
	0xfe, 0x04, 0xdb, 0x4b, 0x87, 0xca, 0x62, 0x9e, 0xf2, 0x79, 0xfd, 0x43, 0x18, 0x8f, 0x8f, 0xe5,
	0x8a, 0x3f, 0xc2, 0x36, 0xc1, 0x0a, 0x49, 0xf7, 0x63, 0x97, 0xb5, 0x54, 0xef, 0xc1, 0x7f, 0x45,
	0xbb, 0x94, 0xc6, 0x0d, 0x72, 0xc5, 0x9f, 0x61, 0x47, 0x12, 0xdd, 0xec, 0x78, 0x07, 0x16, 0x86,
	0x8f, 0x80, 0xfe, 0xec, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x8f, 0x9d, 0x5f, 0xcb, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CatClient is the client API for Cat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatClient interface {
	CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error)
	GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error)
}

type catClient struct {
	cc grpc.ClientConnInterface
}

func NewCatClient(cc grpc.ClientConnInterface) CatClient {
	return &catClient{cc}
}

func (c *catClient) CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Cat/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Cat/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/Cat/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/Cat/GetVMName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatServer is the server API for Cat service.
type CatServer interface {
	CreateVM(context.Context, *VMData) (*Result, error)
	DeleteVM(context.Context, *VMID) (*Result, error)
	GetVM(context.Context, *VMID) (*VMData, error)
	GetVMName(context.Context, *VMName) (*VMData, error)
}

// UnimplementedCatServer can be embedded to have forward compatible implementations.
type UnimplementedCatServer struct {
}

func (*UnimplementedCatServer) CreateVM(ctx context.Context, req *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedCatServer) DeleteVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedCatServer) GetVM(ctx context.Context, req *VMID) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedCatServer) GetVMName(ctx context.Context, req *VMName) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMName not implemented")
}

func RegisterCatServer(s *grpc.Server, srv CatServer) {
	s.RegisterService(&_Cat_serviceDesc, srv)
}

func _Cat_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cat/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).CreateVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cat/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cat/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).GetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_GetVMName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).GetVMName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cat/GetVMName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).GetVMName(ctx, req.(*VMName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cat",
	HandlerType: (*CatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _Cat_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _Cat_DeleteVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _Cat_GetVM_Handler,
		},
		{
			MethodName: "GetVMName",
			Handler:    _Cat_GetVMName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtualmachine.proto-go",
}
