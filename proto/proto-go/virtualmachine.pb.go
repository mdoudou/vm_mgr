// Code generated by protoc-gen-go. DO NOT EDIT.
// source: virtualmachine.proto

package virtualmachine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VMData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Vmname               string   `protobuf:"bytes,2,opt,name=vmname,proto3" json:"vmname,omitempty"`
	Vcpu                 int64    `protobuf:"varint,3,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Vmem                 int64    `protobuf:"varint,4,opt,name=vmem,proto3" json:"vmem,omitempty"`
	StoragePath          string   `protobuf:"bytes,5,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	Storage              int64    `protobuf:"varint,6,opt,name=storage,proto3" json:"storage,omitempty"`
	CdromPath            string   `protobuf:"bytes,7,opt,name=cdrom_path,json=cdromPath,proto3" json:"cdrom_path,omitempty"`
	Vnet                 string   `protobuf:"bytes,8,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Vnc                  int64    `protobuf:"varint,9,opt,name=vnc,proto3" json:"vnc,omitempty"`
	Autostart            bool     `protobuf:"varint,10,opt,name=autostart,proto3" json:"autostart,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMData) Reset()         { *m = VMData{} }
func (m *VMData) String() string { return proto.CompactTextString(m) }
func (*VMData) ProtoMessage()    {}
func (*VMData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{0}
}

func (m *VMData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMData.Unmarshal(m, b)
}
func (m *VMData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMData.Marshal(b, m, deterministic)
}
func (m *VMData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMData.Merge(m, src)
}
func (m *VMData) XXX_Size() int {
	return xxx_messageInfo_VMData.Size(m)
}
func (m *VMData) XXX_DiscardUnknown() {
	xxx_messageInfo_VMData.DiscardUnknown(m)
}

var xxx_messageInfo_VMData proto.InternalMessageInfo

func (m *VMData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VMData) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

func (m *VMData) GetVcpu() int64 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *VMData) GetVmem() int64 {
	if m != nil {
		return m.Vmem
	}
	return 0
}

func (m *VMData) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *VMData) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *VMData) GetCdromPath() string {
	if m != nil {
		return m.CdromPath
	}
	return ""
}

func (m *VMData) GetVnet() string {
	if m != nil {
		return m.Vnet
	}
	return ""
}

func (m *VMData) GetVnc() int64 {
	if m != nil {
		return m.Vnc
	}
	return 0
}

func (m *VMData) GetAutostart() bool {
	if m != nil {
		return m.Autostart
	}
	return false
}

type SnapshotOperationData struct {
	Vmid                 int64    `protobuf:"varint,1,opt,name=vmid,proto3" json:"vmid,omitempty"`
	Operation            int32    `protobuf:"varint,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotOperationData) Reset()         { *m = SnapshotOperationData{} }
func (m *SnapshotOperationData) String() string { return proto.CompactTextString(m) }
func (*SnapshotOperationData) ProtoMessage()    {}
func (*SnapshotOperationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{1}
}

func (m *SnapshotOperationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotOperationData.Unmarshal(m, b)
}
func (m *SnapshotOperationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotOperationData.Marshal(b, m, deterministic)
}
func (m *SnapshotOperationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotOperationData.Merge(m, src)
}
func (m *SnapshotOperationData) XXX_Size() int {
	return xxx_messageInfo_SnapshotOperationData.Size(m)
}
func (m *SnapshotOperationData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotOperationData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotOperationData proto.InternalMessageInfo

func (m *SnapshotOperationData) GetVmid() int64 {
	if m != nil {
		return m.Vmid
	}
	return 0
}

func (m *SnapshotOperationData) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *SnapshotOperationData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type SnapshotData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Size                 string   `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Date                 string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Vmclock              string   `protobuf:"bytes,5,opt,name=vmclock,proto3" json:"vmclock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotData) Reset()         { *m = SnapshotData{} }
func (m *SnapshotData) String() string { return proto.CompactTextString(m) }
func (*SnapshotData) ProtoMessage()    {}
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{2}
}

func (m *SnapshotData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotData.Unmarshal(m, b)
}
func (m *SnapshotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotData.Marshal(b, m, deterministic)
}
func (m *SnapshotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotData.Merge(m, src)
}
func (m *SnapshotData) XXX_Size() int {
	return xxx_messageInfo_SnapshotData.Size(m)
}
func (m *SnapshotData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotData proto.InternalMessageInfo

func (m *SnapshotData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SnapshotData) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SnapshotData) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *SnapshotData) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *SnapshotData) GetVmclock() string {
	if m != nil {
		return m.Vmclock
	}
	return ""
}

type VMName struct {
	Vmname               string   `protobuf:"bytes,1,opt,name=vmname,proto3" json:"vmname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMName) Reset()         { *m = VMName{} }
func (m *VMName) String() string { return proto.CompactTextString(m) }
func (*VMName) ProtoMessage()    {}
func (*VMName) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{3}
}

func (m *VMName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMName.Unmarshal(m, b)
}
func (m *VMName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMName.Marshal(b, m, deterministic)
}
func (m *VMName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMName.Merge(m, src)
}
func (m *VMName) XXX_Size() int {
	return xxx_messageInfo_VMName.Size(m)
}
func (m *VMName) XXX_DiscardUnknown() {
	xxx_messageInfo_VMName.DiscardUnknown(m)
}

var xxx_messageInfo_VMName proto.InternalMessageInfo

func (m *VMName) GetVmname() string {
	if m != nil {
		return m.Vmname
	}
	return ""
}

type VMDataResponse struct {
	VMDatas              []*VMData `protobuf:"bytes,1,rep,name=VMDatas,proto3" json:"VMDatas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VMDataResponse) Reset()         { *m = VMDataResponse{} }
func (m *VMDataResponse) String() string { return proto.CompactTextString(m) }
func (*VMDataResponse) ProtoMessage()    {}
func (*VMDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{4}
}

func (m *VMDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMDataResponse.Unmarshal(m, b)
}
func (m *VMDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMDataResponse.Marshal(b, m, deterministic)
}
func (m *VMDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMDataResponse.Merge(m, src)
}
func (m *VMDataResponse) XXX_Size() int {
	return xxx_messageInfo_VMDataResponse.Size(m)
}
func (m *VMDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMDataResponse proto.InternalMessageInfo

func (m *VMDataResponse) GetVMDatas() []*VMData {
	if m != nil {
		return m.VMDatas
	}
	return nil
}

type VMID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMID) Reset()         { *m = VMID{} }
func (m *VMID) String() string { return proto.CompactTextString(m) }
func (*VMID) ProtoMessage()    {}
func (*VMID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{5}
}

func (m *VMID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMID.Unmarshal(m, b)
}
func (m *VMID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMID.Marshal(b, m, deterministic)
}
func (m *VMID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMID.Merge(m, src)
}
func (m *VMID) XXX_Size() int {
	return xxx_messageInfo_VMID.Size(m)
}
func (m *VMID) XXX_DiscardUnknown() {
	xxx_messageInfo_VMID.DiscardUnknown(m)
}

var xxx_messageInfo_VMID proto.InternalMessageInfo

func (m *VMID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Result struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{6}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Timer struct {
	Time                 int32    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timer) Reset()         { *m = Timer{} }
func (m *Timer) String() string { return proto.CompactTextString(m) }
func (*Timer) ProtoMessage()    {}
func (*Timer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f620cdfcc6a9426c, []int{7}
}

func (m *Timer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timer.Unmarshal(m, b)
}
func (m *Timer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timer.Marshal(b, m, deterministic)
}
func (m *Timer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timer.Merge(m, src)
}
func (m *Timer) XXX_Size() int {
	return xxx_messageInfo_Timer.Size(m)
}
func (m *Timer) XXX_DiscardUnknown() {
	xxx_messageInfo_Timer.DiscardUnknown(m)
}

var xxx_messageInfo_Timer proto.InternalMessageInfo

func (m *Timer) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*VMData)(nil), "VMData")
	proto.RegisterType((*SnapshotOperationData)(nil), "SnapshotOperationData")
	proto.RegisterType((*SnapshotData)(nil), "SnapshotData")
	proto.RegisterType((*VMName)(nil), "VMName")
	proto.RegisterType((*VMDataResponse)(nil), "VMDataResponse")
	proto.RegisterType((*VMID)(nil), "VMID")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*Timer)(nil), "Timer")
}

func init() { proto.RegisterFile("virtualmachine.proto", fileDescriptor_f620cdfcc6a9426c) }

var fileDescriptor_f620cdfcc6a9426c = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x93, 0xfa, 0x6b, 0xfa, 0x21, 0xb4, 0x40, 0x65, 0xda, 0xb4, 0xa4, 0x3e, 0x85, 0x8b,
	0x85, 0xda, 0x0b, 0x57, 0x44, 0xa4, 0x88, 0x43, 0x4a, 0xe5, 0xa0, 0x5c, 0x38, 0xa0, 0xc5, 0x1e,
	0x35, 0x16, 0xb6, 0xd7, 0xf2, 0x8e, 0x83, 0xc4, 0xbf, 0xe4, 0xdf, 0x70, 0x44, 0x3b, 0xb1, 0x1b,
	0x03, 0xee, 0xed, 0xed, 0x7b, 0xf3, 0xe5, 0x37, 0x23, 0xc3, 0x8b, 0x6d, 0x56, 0x53, 0x23, 0xf3,
	0x42, 0x26, 0x9b, 0xac, 0xc4, 0xa8, 0xaa, 0x15, 0xa9, 0xf0, 0xb7, 0x05, 0xce, 0x7a, 0x39, 0x97,
	0x24, 0xc5, 0x29, 0x8c, 0xb2, 0x34, 0xb0, 0xa6, 0xd6, 0x6c, 0x1c, 0x8f, 0xb2, 0x54, 0x9c, 0x81,
	0xb3, 0x2d, 0x4a, 0x59, 0x60, 0x30, 0x9a, 0x5a, 0x33, 0x3f, 0x6e, 0x5f, 0x42, 0xc0, 0xe1, 0x36,
	0xa9, 0x9a, 0x60, 0xcc, 0x91, 0x8c, 0x99, 0x2b, 0xb0, 0x08, 0x0e, 0x5b, 0xae, 0xc0, 0x42, 0x5c,
	0xc3, 0xb1, 0x26, 0x55, 0xcb, 0x07, 0xfc, 0x5a, 0x49, 0xda, 0x04, 0x36, 0x57, 0x39, 0x6a, 0xb9,
	0x7b, 0x49, 0x1b, 0x11, 0x80, 0xdb, 0x3e, 0x03, 0x87, 0x33, 0xbb, 0xa7, 0xb8, 0x04, 0x48, 0xd2,
	0x5a, 0x15, 0xbb, 0x54, 0x97, 0x53, 0x7d, 0x66, 0x38, 0xd1, 0xf4, 0x2b, 0x91, 0x02, 0x8f, 0x05,
	0xc6, 0xe2, 0x19, 0x8c, 0xb7, 0x65, 0x12, 0xf8, 0x5c, 0xc8, 0x40, 0x31, 0x01, 0x5f, 0x36, 0xa4,
	0x34, 0xc9, 0x9a, 0x02, 0x98, 0x5a, 0x33, 0x2f, 0xde, 0x13, 0xe1, 0x17, 0x78, 0xb9, 0x2a, 0x65,
	0xa5, 0x37, 0x8a, 0x3e, 0x55, 0x58, 0x4b, 0xca, 0x54, 0xc9, 0x46, 0xf0, 0xc7, 0x3c, 0x5a, 0xc1,
	0xd8, 0x94, 0x52, 0x5d, 0x10, 0xfb, 0x61, 0xc7, 0x7b, 0xc2, 0xb4, 0x26, 0xf9, 0xc0, 0x8e, 0xf8,
	0xb1, 0x81, 0x61, 0x0d, 0xc7, 0x5d, 0xf1, 0x41, 0x73, 0xdb, 0x8c, 0xd1, 0x63, 0x86, 0xe9, 0xaa,
	0xb3, 0x9f, 0xd8, 0x16, 0x61, 0x6c, 0xb8, 0x54, 0x12, 0xb2, 0xad, 0x7e, 0xcc, 0xd8, 0x78, 0xb6,
	0x2d, 0x92, 0x5c, 0x25, 0xdf, 0x5b, 0x47, 0xbb, 0x67, 0x38, 0x35, 0xab, 0xbc, 0x33, 0x2b, 0xda,
	0xaf, 0xce, 0xea, 0xaf, 0x2e, 0xbc, 0x85, 0xd3, 0xdd, 0xb2, 0x63, 0xd4, 0x95, 0x2a, 0x35, 0x8a,
	0x6b, 0x70, 0x77, 0x8c, 0x0e, 0xac, 0xe9, 0x78, 0x76, 0x74, 0xe3, 0x46, 0x6d, 0x44, 0xc7, 0x87,
	0x67, 0x70, 0xb8, 0x5e, 0x7e, 0x9c, 0xff, 0xfb, 0x09, 0xa6, 0x5d, 0x8c, 0xba, 0xc9, 0xc9, 0xb4,
	0xd3, 0x24, 0xa9, 0xd1, 0xac, 0x7a, 0x71, 0xfb, 0x0a, 0x2f, 0xc0, 0xfe, 0x9c, 0x15, 0x58, 0x9b,
	0xef, 0xa0, 0xac, 0x9d, 0xc6, 0x8e, 0x19, 0xdf, 0xfc, 0x1a, 0xc3, 0x68, 0xbd, 0x14, 0x57, 0xe0,
	0x7d, 0xa8, 0x51, 0x12, 0xae, 0x97, 0xa2, 0xeb, 0x7d, 0xee, 0x46, 0xbb, 0xca, 0xe1, 0x81, 0x98,
	0x80, 0x37, 0xc7, 0x1c, 0x59, 0xb7, 0x23, 0x33, 0x48, 0x5f, 0xbd, 0x00, 0x77, 0x65, 0x96, 0x39,
	0x28, 0x9e, 0x83, 0xb3, 0x22, 0x55, 0x0d, 0x6a, 0x57, 0x00, 0xab, 0x4d, 0x43, 0xa9, 0xfa, 0x51,
	0x3e, 0x55, 0x38, 0x46, 0x8d, 0xf4, 0x94, 0x78, 0x2f, 0x1b, 0x3d, 0x3c, 0xd2, 0x04, 0x3c, 0x83,
	0x8b, 0x61, 0xf5, 0x0d, 0x9c, 0x2c, 0x90, 0xba, 0xd3, 0xd8, 0x87, 0x9c, 0x44, 0xfd, 0x73, 0x09,
	0x0f, 0xde, 0x5a, 0xe2, 0x1d, 0x3c, 0xff, 0xef, 0x3e, 0xd7, 0x4b, 0x71, 0x16, 0x0d, 0x5e, 0x6d,
	0xbf, 0xc9, 0x2b, 0xb0, 0x17, 0x7f, 0x8f, 0xbe, 0xf3, 0x35, 0x3c, 0x10, 0xaf, 0xc1, 0x67, 0x89,
	0xcf, 0xc4, 0xf0, 0x06, 0xf4, 0x03, 0x26, 0xe0, 0x2d, 0x90, 0xde, 0xe7, 0xf9, 0xe0, 0xf8, 0x97,
	0xe0, 0x19, 0x4b, 0xef, 0x54, 0x8a, 0xc2, 0x89, 0x78, 0xb9, 0x3d, 0xf9, 0x9b, 0xc3, 0x3f, 0x95,
	0xdb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x6c, 0x65, 0xa7, 0x6c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VMClient is the client API for VM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMClient interface {
	CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VM_GetSnapshotVMClient, error)
	SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error)
	GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error)
	GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error)
	GetAllVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error)
	StopNode(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Result, error)
}

type vMClient struct {
	cc grpc.ClientConnInterface
}

func NewVMClient(cc grpc.ClientConnInterface) VMClient {
	return &vMClient{cc}
}

func (c *vMClient) CreateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ShutdownVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ShutdownVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ResetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ResetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) PauseVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/PauseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) ResumeVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/ResumeVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetSnapshotVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VM_GetSnapshotVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VM_serviceDesc.Streams[0], "/VM/GetSnapshotVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMGetSnapshotVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VM_GetSnapshotVMClient interface {
	Recv() (*SnapshotData, error)
	grpc.ClientStream
}

type vMGetSnapshotVMClient struct {
	grpc.ClientStream
}

func (x *vMGetSnapshotVMClient) Recv() (*SnapshotData, error) {
	m := new(SnapshotData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMClient) SnapshotOperationVM(ctx context.Context, in *SnapshotOperationData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/SnapshotOperationVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/VM/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetVMName(ctx context.Context, in *VMName, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/VM/GetVMName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) GetAllVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/GetAllVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StopNode(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/VM/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServer is the server API for VM service.
type VMServer interface {
	CreateVM(context.Context, *VMData) (*Result, error)
	DeleteVM(context.Context, *VMID) (*Result, error)
	StartVM(context.Context, *VMID) (*Result, error)
	StopVM(context.Context, *VMID) (*Result, error)
	ShutdownVM(context.Context, *VMID) (*Result, error)
	ResetVM(context.Context, *VMID) (*Result, error)
	PauseVM(context.Context, *VMID) (*Result, error)
	ResumeVM(context.Context, *VMID) (*Result, error)
	GetSnapshotVM(*VMID, VM_GetSnapshotVMServer) error
	SnapshotOperationVM(context.Context, *SnapshotOperationData) (*Result, error)
	GetVM(context.Context, *VMID) (*VMData, error)
	GetVMName(context.Context, *VMName) (*VMData, error)
	GetAllVM(context.Context, *VMID) (*Result, error)
	StopNode(context.Context, *Timer) (*Result, error)
}

// UnimplementedVMServer can be embedded to have forward compatible implementations.
type UnimplementedVMServer struct {
}

func (*UnimplementedVMServer) CreateVM(ctx context.Context, req *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedVMServer) DeleteVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedVMServer) StartVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (*UnimplementedVMServer) StopVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (*UnimplementedVMServer) ShutdownVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVM not implemented")
}
func (*UnimplementedVMServer) ResetVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVM not implemented")
}
func (*UnimplementedVMServer) PauseVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (*UnimplementedVMServer) ResumeVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (*UnimplementedVMServer) GetSnapshotVM(req *VMID, srv VM_GetSnapshotVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshotVM not implemented")
}
func (*UnimplementedVMServer) SnapshotOperationVM(ctx context.Context, req *SnapshotOperationData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotOperationVM not implemented")
}
func (*UnimplementedVMServer) GetVM(ctx context.Context, req *VMID) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedVMServer) GetVMName(ctx context.Context, req *VMName) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMName not implemented")
}
func (*UnimplementedVMServer) GetAllVM(ctx context.Context, req *VMID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVM not implemented")
}
func (*UnimplementedVMServer) StopNode(ctx context.Context, req *Timer) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}

func RegisterVMServer(s *grpc.Server, srv VMServer) {
	s.RegisterService(&_VM_serviceDesc, srv)
}

func _VM_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).CreateVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ShutdownVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ShutdownVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ResetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ResetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ResetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ResetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/PauseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).PauseVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/ResumeVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).ResumeVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetSnapshotVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServer).GetSnapshotVM(m, &vMGetSnapshotVMServer{stream})
}

type VM_GetSnapshotVMServer interface {
	Send(*SnapshotData) error
	grpc.ServerStream
}

type vMGetSnapshotVMServer struct {
	grpc.ServerStream
}

func (x *vMGetSnapshotVMServer) Send(m *SnapshotData) error {
	return x.ServerStream.SendMsg(m)
}

func _VM_SnapshotOperationVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotOperationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).SnapshotOperationVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/SnapshotOperationVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).SnapshotOperationVM(ctx, req.(*SnapshotOperationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetVMName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetVMName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetVMName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetVMName(ctx, req.(*VMName))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_GetAllVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).GetAllVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/GetAllVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).GetAllVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StopNode(ctx, req.(*Timer))
	}
	return interceptor(ctx, in, info, handler)
}

var _VM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VM",
	HandlerType: (*VMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VM_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VM_DeleteVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VM_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VM_StopVM_Handler,
		},
		{
			MethodName: "ShutdownVM",
			Handler:    _VM_ShutdownVM_Handler,
		},
		{
			MethodName: "ResetVM",
			Handler:    _VM_ResetVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _VM_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _VM_ResumeVM_Handler,
		},
		{
			MethodName: "SnapshotOperationVM",
			Handler:    _VM_SnapshotOperationVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _VM_GetVM_Handler,
		},
		{
			MethodName: "GetVMName",
			Handler:    _VM_GetVMName_Handler,
		},
		{
			MethodName: "GetAllVM",
			Handler:    _VM_GetAllVM_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _VM_StopNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSnapshotVM",
			Handler:       _VM_GetSnapshotVM_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "virtualmachine.proto",
}
